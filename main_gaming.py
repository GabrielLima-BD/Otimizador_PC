"""
Interface Principal do Otimizador PC Gaming
Vers√£o ULTRA com busca universal, modos especiais e filtros inteligentes
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, ttk, filedialog
import threading
import time
import os
import json
from datetime import datetime
from typing import Dict, List, Optional

# Imports dos m√≥dulos do otimizador
from optimizer.game_scanner import GameScanner, GameInfo
from optimizer.game_launcher import GameLauncher
from optimizer.advanced_optimizer import AdvancedOptimizer
from optimizer.advanced_cleaner import AdvancedCleaner
from optimizer.system_monitor import SystemMonitor
from optimizer.schedule_manager import ScheduleManager
from optimizer.universal_app_scanner import UniversalAppScanner, AppInfo
from optimizer.special_modes import SpecialModes


class AdvancedMainWindow(ctk.CTk):
    """Janela principal do otimizador com interface completa e modos especiais"""
    
    def __init__(self):
        super().__init__()
        
        # Configurar janela
        self.title("üéÆ Otimizador PC Gaming ULTRA - üé§ MICROFONE PROTEGIDO")
        self.geometry("1200x800")
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        
        # Inicializar componentes
        self.universal_scanner = UniversalAppScanner()
        self.game_scanner = GameScanner()
        self.game_launcher = GameLauncher()
        self.advanced_optimizer = AdvancedOptimizer()
        self.advanced_cleaner = AdvancedCleaner()
        self.system_monitor = SystemMonitor()
        self.schedule_manager = ScheduleManager()
        self.special_modes = SpecialModes(self.advanced_optimizer)
        
        # Dados
        self.apps_list: List[AppInfo] = []
        self.selected_apps: List[AppInfo] = []
        self.current_metrics = {}
        
        # Criar interface
        self.create_widgets()
        self.start_monitoring()
        
    def create_widgets(self):
        """Cria todos os widgets da interface"""
        
        # Barra de pesquisa no topo
        self.create_search_bar()
        
        # Notebook com abas
        self.notebook = ctk.CTkTabview(self)
        self.notebook.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        
        # Criar abas
        self.create_apps_tab()
        self.create_optimization_tab()
        self.create_monitoring_tab()
        self.create_schedule_tab()
    
    def create_search_bar(self):
        """Cria barra de pesquisa universal no topo"""
        search_frame = ctk.CTkFrame(self)
        search_frame.grid(row=0, column=0, sticky="ew", padx=10, pady=10)
        search_frame.grid_columnconfigure(1, weight=1)
        
        # Label
        search_label = ctk.CTkLabel(search_frame, text="üîç Buscar Apps:", font=("Arial", 14, "bold"))
        search_label.grid(row=0, column=0, padx=10, pady=10)
        
        # Entry de pesquisa
        self.search_entry = ctk.CTkEntry(
            search_frame, 
            placeholder_text="Digite o nome do app... (Ex: Chrome, Steam, Discord)",
            font=("Arial", 12),
            height=35
        )
        self.search_entry.grid(row=0, column=1, sticky="ew", padx=10, pady=10)
        self.search_entry.bind("<KeyRelease>", self.on_search_changed)
        
        # Bot√£o buscar todos
        self.scan_all_btn = ctk.CTkButton(
            search_frame,
            text="üì± Buscar Todos os Apps",
            command=self.scan_all_apps,
            height=35,
            font=("Arial", 12, "bold")
        )
        self.scan_all_btn.grid(row=0, column=2, padx=10, pady=10)
        
        # Status da busca
        self.search_status = ctk.CTkLabel(search_frame, text="‚ö° Digite para buscar ou clique em 'Buscar Todos'")
        self.search_status.grid(row=1, column=0, columnspan=3, padx=10, pady=5)
    
    def create_apps_tab(self):
        """Aba de aplicativos e jogos"""
        self.apps_tab = self.notebook.add("üéÆ Apps & Jogos")
        self.apps_tab.grid_columnconfigure(0, weight=2)
        self.apps_tab.grid_columnconfigure(1, weight=1)
        self.apps_tab.grid_rowconfigure(1, weight=1)
        
        # Frame de progresso (inicialmente oculto)
        self.progress_frame = ctk.CTkFrame(self.apps_tab)
        
        self.progress_bar = ctk.CTkProgressBar(self.progress_frame)
        self.progress_bar.pack(pady=10, padx=20, fill="x")
        
        self.progress_label = ctk.CTkLabel(self.progress_frame, text="Buscando...")
        self.progress_label.pack(pady=5)
        
        # Lista de apps/jogos
        apps_list_frame = ctk.CTkFrame(self.apps_tab)
        apps_list_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        apps_list_frame.grid_rowconfigure(1, weight=1)
        
        apps_list_label = ctk.CTkLabel(apps_list_frame, text="üìã Apps Encontrados:", font=("Arial", 14, "bold"))
        apps_list_label.grid(row=0, column=0, sticky="w", padx=10, pady=10)
        
        # ScrollableFrame para apps
        self.apps_scroll_frame = ctk.CTkScrollableFrame(apps_list_frame)
        self.apps_scroll_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        
        # Frame de controles
        controls_frame = ctk.CTkFrame(self.apps_tab)
        controls_frame.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)
        
        controls_label = ctk.CTkLabel(controls_frame, text="üéØ Apps Selecionados:", font=("Arial", 14, "bold"))
        controls_label.pack(pady=10)
        
        # Lista de selecionados
        self.selected_listbox = tk.Listbox(controls_frame, height=15)
        self.selected_listbox.pack(pady=10, padx=10, fill="both", expand=True)
        
        # Bot√µes de a√ß√£o
        btn_frame = ctk.CTkFrame(controls_frame)
        btn_frame.pack(pady=10, padx=10, fill="x")
        
        self.launch_selected_btn = ctk.CTkButton(
            btn_frame,
            text="üöÄ Executar Selecionados",
            command=self.launch_selected_apps,
            height=40,
            font=("Arial", 12, "bold")
        )
        self.launch_selected_btn.pack(pady=5, fill="x")
        
        self.clear_selection_btn = ctk.CTkButton(
            btn_frame,
            text="üóëÔ∏è Limpar Sele√ß√£o",
            command=self.clear_selection,
            height=35
        )
        self.clear_selection_btn.pack(pady=5, fill="x")
        
        # Estat√≠sticas
        stats_frame = ctk.CTkFrame(controls_frame)
        stats_frame.pack(pady=10, padx=10, fill="x")
        
        self.stats_label = ctk.CTkLabel(stats_frame, text="üìä Estat√≠sticas", font=("Arial", 12, "bold"))
        self.stats_label.pack(pady=5)
        
        self.stats_text = ctk.CTkTextbox(stats_frame, height=100)
        self.stats_text.pack(pady=5, padx=5, fill="x")
        self.update_stats_display()
    
    def create_optimization_tab(self):
        """Aba de otimiza√ß√£o do sistema"""
        self.optimization_tab = self.notebook.add("‚ö° Otimiza√ß√£o")
        self.optimization_tab.grid_columnconfigure(0, weight=1)
        self.optimization_tab.grid_columnconfigure(1, weight=1)
        self.optimization_tab.grid_rowconfigure(1, weight=1)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(self.optimization_tab, text="‚ö° Otimiza√ß√£o do Sistema", font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=20)
        
        # Frame de a√ß√µes r√°pidas
        quick_frame = ctk.CTkFrame(self.optimization_tab)
        quick_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        
        quick_label = ctk.CTkLabel(quick_frame, text="üöÄ A√ß√µes R√°pidas", font=("Arial", 14, "bold"))
        quick_label.pack(pady=10)
        
        # Bot√µes de otimiza√ß√£o r√°pida
        self.quick_cleanup_btn = ctk.CTkButton(
            quick_frame,
            text="üßπ Limpeza R√°pida",
            command=self.quick_cleanup,
            height=40,
            font=("Arial", 12, "bold")
        )
        self.quick_cleanup_btn.pack(pady=10, padx=20, fill="x")
        
        self.gaming_mode_btn = ctk.CTkButton(
            quick_frame,
            text="üéÆ Modo Gaming",
            command=self.enable_gaming_mode,
            height=40,
            font=("Arial", 12, "bold")
        )
        self.gaming_mode_btn.pack(pady=10, padx=20, fill="x")
        
        self.boost_performance_btn = ctk.CTkButton(
            quick_frame,
            text="‚ö° Boost Performance",
            command=self.boost_performance,
            height=40,
            font=("Arial", 12, "bold")
        )
        self.boost_performance_btn.pack(pady=10, padx=20, fill="x")
        
        self.system_report_btn = ctk.CTkButton(
            quick_frame,
            text="üìä Relat√≥rio do Sistema",
            command=self.generate_system_report,
            height=40,
            font=("Arial", 12, "bold")
        )
        self.system_report_btn.pack(pady=10, padx=20, fill="x")
        
        # Frame de otimiza√ß√£o avan√ßada
        advanced_frame = ctk.CTkFrame(self.optimization_tab)
        advanced_frame.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)
        
        advanced_label = ctk.CTkLabel(advanced_frame, text="üîß Otimiza√ß√£o Avan√ßada", font=("Arial", 14, "bold"))
        advanced_label.pack(pady=10)
        
        # Op√ß√µes de otimiza√ß√£o
        self.opt_registry = ctk.CTkCheckBox(advanced_frame, text="üóÉÔ∏è Limpar Registro")
        self.opt_registry.pack(pady=5, padx=20, anchor="w")
        self.opt_registry.select()
        
        self.opt_temp_files = ctk.CTkCheckBox(advanced_frame, text="üìÅ Arquivos Tempor√°rios")
        self.opt_temp_files.pack(pady=5, padx=20, anchor="w")
        self.opt_temp_files.select()
        
        self.opt_startup = ctk.CTkCheckBox(advanced_frame, text="üöÄ Otimizar Inicializa√ß√£o")
        self.opt_startup.pack(pady=5, padx=20, anchor="w")
        self.opt_startup.select()
        
        self.opt_services = ctk.CTkCheckBox(advanced_frame, text="‚öôÔ∏è Otimizar Servi√ßos")
        self.opt_services.pack(pady=5, padx=20, anchor="w")
        
        self.opt_network = ctk.CTkCheckBox(advanced_frame, text="üåê Otimizar Rede")
        self.opt_network.pack(pady=5, padx=20, anchor="w")
        
        self.opt_graphics = ctk.CTkCheckBox(advanced_frame, text="üéÆ Otimizar Gr√°ficos")
        self.opt_graphics.pack(pady=5, padx=20, anchor="w")
        
        # Bot√£o de otimiza√ß√£o personalizada
        self.custom_optimize_btn = ctk.CTkButton(
            advanced_frame,
            text="üîß Executar Otimiza√ß√£o Personalizada",
            command=self.custom_optimization,
            height=40,
            font=("Arial", 12, "bold")
        )
        self.custom_optimize_btn.pack(pady=20, padx=20, fill="x")
        
        # Bot√£o de otimiza√ß√µes avan√ßadas
        self.advanced_optimize_btn = ctk.CTkButton(
            advanced_frame,
            text="‚ö° Otimiza√ß√µes Avan√ßadas do Sistema",
            command=self.advanced_system_optimization,
            height=40,
            font=("Arial", 12, "bold"),
            fg_color="#ff6b35",
            hover_color="#e55a2b"
        )
        self.advanced_optimize_btn.pack(pady=(0, 10), padx=20, fill="x")
        
        # Bot√£o de otimiza√ß√µes ULTRA avan√ßadas
        self.ultra_advanced_optimize_btn = ctk.CTkButton(
            advanced_frame,
            text="üöÄ OTIMIZA√á√ïES ULTRA AVAN√áADAS - M√ÅXIMA PERFORMANCE",
            command=self.ultra_advanced_system_optimization,
            height=40,
            font=("Arial", 12, "bold"),
            fg_color="#dc2626",
            hover_color="#b91c1c"
        )
        self.ultra_advanced_optimize_btn.pack(pady=(0, 20), padx=20, fill="x")
        
        # === MODOS ESPECIAIS COMBINADOS ===
        special_modes_label = ctk.CTkLabel(advanced_frame, text="üéØ MODOS ESPECIAIS DE OTIMIZA√á√ÉO", 
                                         font=("Arial", 14, "bold"), text_color="#00ff00")
        special_modes_label.pack(pady=(20, 10))
        
        # Frame para os modos especiais
        special_modes_frame = ctk.CTkFrame(advanced_frame)
        special_modes_frame.pack(pady=5, padx=20, fill="x")
        
        # MODO 1: TURBO GAMING (Turbo + Gaming)
        turbo_frame = ctk.CTkFrame(special_modes_frame)
        turbo_frame.pack(pady=10, padx=15, fill="x")
        
        turbo_btn = ctk.CTkButton(
            turbo_frame,
            text="üöÄ MODO TURBO GAMING",
            command=self.activate_turbo_gaming_mode,
            height=40,
            width=200,
            font=("Arial", 12, "bold"),
            fg_color="#ff4500",
            hover_color="#e03e00"
        )
        turbo_btn.pack(side="left", padx=10, pady=10)
        
        turbo_desc = ctk.CTkLabel(
            turbo_frame,
            text="üéÆ ATIVA: Performance m√°xima, prioridade para jogos, limpeza RAM\n" +
                 "‚ùå DESATIVA: Servi√ßos desnecess√°rios, efeitos visuais, indexa√ß√£o\n" +
                 "‚ö° IDEAL: Jogos competitivos e m√°xima performance",
            font=("Arial", 10),
            justify="left"
        )
        turbo_desc.pack(side="left", padx=10, fill="x", expand=True)
        
        # MODO 2: BENCHMARK COMPLETO (Benchmark + Deep Clean)
        benchmark_frame = ctk.CTkFrame(special_modes_frame)
        benchmark_frame.pack(pady=10, padx=15, fill="x")
        
        benchmark_btn = ctk.CTkButton(
            benchmark_frame,
            text="üìä MODO BENCHMARK COMPLETO",
            command=self.activate_benchmark_complete_mode,
            height=40,
            width=200,
            font=("Arial", 12, "bold"),
            fg_color="#0066cc",
            hover_color="#0052a3"
        )
        benchmark_btn.pack(side="left", padx=10, pady=10)
        
        benchmark_desc = ctk.CTkLabel(
            benchmark_frame,
            text="üìà ATIVA: Todas otimiza√ß√µes + relat√≥rios detalhados, limpeza profunda\n" +
                 "üßπ DESATIVA: Arquivos tempor√°rios, cache, logs, registry √≥rf√£o\n" +
                 "üìä IDEAL: Testes de performance e limpeza completa",
            font=("Arial", 10),
            justify="left"
        )
        benchmark_desc.pack(side="left", padx=10, fill="x", expand=True)
        
        # MODO 3: EXTREMO TOTAL (Extremo + Silencioso)
        extreme_frame = ctk.CTkFrame(special_modes_frame)
        extreme_frame.pack(pady=10, padx=15, fill="x")
        
        extreme_btn = ctk.CTkButton(
            extreme_frame,
            text="‚ö° MODO EXTREMO TOTAL",
            command=self.activate_extreme_total_mode,
            height=40,
            width=200,
            font=("Arial", 12, "bold"),
            fg_color="#cc0000",
            hover_color="#a30000"
        )
        extreme_btn.pack(side="left", padx=10, pady=10)
        
        extreme_desc = ctk.CTkLabel(
            extreme_frame,
            text="‚ö†Ô∏è ATIVA: TODAS configura√ß√µes extremas de CPU/GPU/RAM/Rede\n" +
                 "üîá DESATIVA: Telemetria, recursos visuais, funcionalidades desnecess√°rias\n" +
                 "üö® IDEAL: M√°xima performance (requer experi√™ncia)",
            font=("Arial", 10),
            justify="left",
            text_color="#ffaa00"
        )
        extreme_desc.pack(side="left", padx=10, fill="x", expand=True)
        
        # üî• MODO 4: AMD BEAST MODE (NOVO!)
        amd_beast_frame = ctk.CTkFrame(special_modes_frame)
        amd_beast_frame.pack(pady=10, padx=15, fill="x")
        
        amd_beast_btn = ctk.CTkButton(
            amd_beast_frame,
            text="üî• MODO AMD BEAST",
            command=self.activate_amd_beast_mode,
            height=40,
            width=200,
            font=("Arial", 12, "bold"),
            fg_color="#ff4500",
            hover_color="#cc3300"
        )
        amd_beast_btn.pack(side="left", padx=10, pady=10)
        
        amd_beast_desc = ctk.CTkLabel(
            amd_beast_frame,
            text="üî• ESPEC√çFICO AMD: Ryzen CPU + Radeon GPU otimiza√ß√µes extremas\n" +
                 "üöÄ INCLUI: HPET disable, ULPS off, power plans AMD, timers otimizados\n" +
                 "üí™ IDEAL: Hardware AMD Ryzen + Radeon (m√°ximo FPS)",
            font=("Arial", 10),
            justify="left",
            text_color="#ff6600"
        )
        amd_beast_desc.pack(side="left", padx=10, fill="x", expand=True)
        
        # Aviso de prote√ß√£o de √°udio
        audio_protection_label = ctk.CTkLabel(
            special_modes_frame,
            text="üé§ PROTE√á√ÉO DE √ÅUDIO ATIVA: Microfone e som sempre protegidos em todos os modos",
            font=("Arial", 10, "bold"),
            text_color="#00ff00"
        )
        audio_protection_label.pack(pady=10)
        
        # Log de otimiza√ß√£o
        log_label = ctk.CTkLabel(advanced_frame, text="üìã Log de Atividades", font=("Arial", 12, "bold"))
        log_label.pack(pady=(20, 5))
        
        self.optimization_log = ctk.CTkTextbox(advanced_frame, height=200)
        self.optimization_log.pack(pady=5, padx=20, fill="both", expand=True)
        self.optimization_log.insert("1.0", "Sistema pronto para otimiza√ß√£o...\n")
    
    def create_monitoring_tab(self):
        """Aba de monitoramento do sistema"""
        self.monitoring_tab = self.notebook.add("üìä Monitoramento")
        self.monitoring_tab.grid_columnconfigure(0, weight=1)
        self.monitoring_tab.grid_columnconfigure(1, weight=1)
        self.monitoring_tab.grid_rowconfigure(1, weight=1)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(self.monitoring_tab, text="üìä Monitoramento em Tempo Real", font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=20)
        
        # Frame de m√©tricas principais
        metrics_frame = ctk.CTkFrame(self.monitoring_tab)
        metrics_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        
        metrics_label = ctk.CTkLabel(metrics_frame, text="üíª Recursos do Sistema", font=("Arial", 14, "bold"))
        metrics_label.pack(pady=10)
        
        # CPU
        cpu_frame = ctk.CTkFrame(metrics_frame)
        cpu_frame.pack(pady=10, padx=20, fill="x")
        
        self.cpu_label = ctk.CTkLabel(cpu_frame, text="üñ•Ô∏è CPU: 0%", font=("Arial", 12, "bold"))
        self.cpu_label.pack(pady=5)
        
        self.cpu_progress = ctk.CTkProgressBar(cpu_frame)
        self.cpu_progress.pack(pady=5, padx=10, fill="x")
        
        # RAM
        ram_frame = ctk.CTkFrame(metrics_frame)
        ram_frame.pack(pady=10, padx=20, fill="x")
        
        self.ram_label = ctk.CTkLabel(ram_frame, text="üíæ RAM: 0%", font=("Arial", 12, "bold"))
        self.ram_label.pack(pady=5)
        
        self.ram_progress = ctk.CTkProgressBar(ram_frame)
        self.ram_progress.pack(pady=5, padx=10, fill="x")
        
        # Disco
        disk_frame = ctk.CTkFrame(metrics_frame)
        disk_frame.pack(pady=10, padx=20, fill="x")
        
        self.disk_label = ctk.CTkLabel(disk_frame, text="üíΩ Disco: 0%", font=("Arial", 12, "bold"))
        self.disk_label.pack(pady=5)
        
        self.disk_progress = ctk.CTkProgressBar(disk_frame)
        self.disk_progress.pack(pady=5, padx=10, fill="x")
        
        # Temperatura (se dispon√≠vel)
        temp_frame = ctk.CTkFrame(metrics_frame)
        temp_frame.pack(pady=10, padx=20, fill="x")
        
        self.temp_label = ctk.CTkLabel(temp_frame, text="üå°Ô∏è Temperatura: N/A", font=("Arial", 12, "bold"))
        self.temp_label.pack(pady=5)
        
        # Frame de processos
        processes_frame = ctk.CTkFrame(self.monitoring_tab)
        processes_frame.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)
        
        processes_label = ctk.CTkLabel(processes_frame, text="üîÑ Processos com Maior Uso", font=("Arial", 14, "bold"))
        processes_label.pack(pady=10)
        
        # Lista de processos
        self.processes_text = ctk.CTkTextbox(processes_frame, height=300)
        self.processes_text.pack(pady=10, padx=20, fill="both", expand=True)
        
        # Bot√µes de controle
        control_frame = ctk.CTkFrame(processes_frame)
        control_frame.pack(pady=10, padx=20, fill="x")
        
        self.refresh_btn = ctk.CTkButton(
            control_frame,
            text="üîÑ Atualizar",
            command=self.refresh_monitoring,
            height=35
        )
        self.refresh_btn.pack(side="left", padx=5)
        
        self.kill_process_btn = ctk.CTkButton(
            control_frame,
            text="‚ùå Finalizar Processo",
            command=self.kill_selected_process,
            height=35
        )
        self.kill_process_btn.pack(side="right", padx=5)
        
        # Health Score
        health_frame = ctk.CTkFrame(self.monitoring_tab)
        health_frame.grid(row=2, column=0, columnspan=2, sticky="ew", padx=10, pady=10)
        
        self.health_label = ctk.CTkLabel(health_frame, text="üíØ Health Score: Calculando...", font=("Arial", 16, "bold"))
        self.health_label.pack(pady=10)
    
    def create_schedule_tab(self):
        """Aba de agendamento"""
        self.schedule_tab = self.notebook.add("‚è∞ Agendamento")
        self.schedule_tab.grid_columnconfigure(0, weight=1)
        self.schedule_tab.grid_columnconfigure(1, weight=1)
        self.schedule_tab.grid_rowconfigure(1, weight=1)
        
        # T√≠tulo
        title_label = ctk.CTkLabel(self.schedule_tab, text="‚è∞ Agendamento de Tarefas", font=("Arial", 18, "bold"))
        title_label.grid(row=0, column=0, columnspan=2, pady=20)
        
        # Frame de nova tarefa
        new_task_frame = ctk.CTkFrame(self.schedule_tab)
        new_task_frame.grid(row=1, column=0, sticky="nsew", padx=10, pady=10)
        
        new_task_label = ctk.CTkLabel(new_task_frame, text="‚ûï Nova Tarefa Agendada", font=("Arial", 14, "bold"))
        new_task_label.pack(pady=10)
        
        # Nome da tarefa
        name_label = ctk.CTkLabel(new_task_frame, text="üìù Nome da Tarefa:")
        name_label.pack(pady=5, anchor="w", padx=20)
        
        self.task_name_entry = ctk.CTkEntry(new_task_frame, placeholder_text="Ex: Limpeza Di√°ria")
        self.task_name_entry.pack(pady=5, padx=20, fill="x")
        
        # Tipo de tarefa
        type_label = ctk.CTkLabel(new_task_frame, text="üîß Tipo de Tarefa:")
        type_label.pack(pady=5, anchor="w", padx=20)
        
        self.task_type_combo = ctk.CTkComboBox(
            new_task_frame,
            values=["Limpeza R√°pida", "Otimiza√ß√£o Completa", "Modo Gaming", "Backup", "Verifica√ß√£o de Sistema"]
        )
        self.task_type_combo.pack(pady=5, padx=20, fill="x")
        self.task_type_combo.set("Limpeza R√°pida")
        
        # Frequ√™ncia
        freq_label = ctk.CTkLabel(new_task_frame, text="üïê Frequ√™ncia:")
        freq_label.pack(pady=5, anchor="w", padx=20)
        
        self.frequency_combo = ctk.CTkComboBox(
            new_task_frame,
            values=["Di√°rio", "Semanal", "Mensal", "Uma vez"]
        )
        self.frequency_combo.pack(pady=5, padx=20, fill="x")
        self.frequency_combo.set("Semanal")
        
        # Hor√°rio
        time_label = ctk.CTkLabel(new_task_frame, text="‚è∞ Hor√°rio:")
        time_label.pack(pady=5, anchor="w", padx=20)
        
        time_frame = ctk.CTkFrame(new_task_frame)
        time_frame.pack(pady=5, padx=20, fill="x")
        
        self.hour_combo = ctk.CTkComboBox(time_frame, values=[f"{i:02d}" for i in range(24)], width=60)
        self.hour_combo.pack(side="left", padx=5)
        self.hour_combo.set("02")  # 2 AM por padr√£o
        
        ctk.CTkLabel(time_frame, text=":").pack(side="left")
        
        self.minute_combo = ctk.CTkComboBox(time_frame, values=[f"{i:02d}" for i in range(0, 60, 15)], width=60)
        self.minute_combo.pack(side="left", padx=5)
        self.minute_combo.set("00")
        
        # Bot√£o adicionar
        self.add_task_btn = ctk.CTkButton(
            new_task_frame,
            text="‚ûï Adicionar Tarefa",
            command=self.add_scheduled_task,
            height=40,
            font=("Arial", 12, "bold")
        )
        self.add_task_btn.pack(pady=20, padx=20, fill="x")
        
        # Frame de tarefas existentes
        existing_tasks_frame = ctk.CTkFrame(self.schedule_tab)
        existing_tasks_frame.grid(row=1, column=1, sticky="nsew", padx=10, pady=10)
        
        existing_label = ctk.CTkLabel(existing_tasks_frame, text="üìã Tarefas Agendadas", font=("Arial", 14, "bold"))
        existing_label.pack(pady=10)
        
        # Lista de tarefas
        self.tasks_listbox = tk.Listbox(existing_tasks_frame, height=15)
        self.tasks_listbox.pack(pady=10, padx=20, fill="both", expand=True)
        
        # Bot√µes de controle
        task_control_frame = ctk.CTkFrame(existing_tasks_frame)
        task_control_frame.pack(pady=10, padx=20, fill="x")
        
        self.enable_task_btn = ctk.CTkButton(
            task_control_frame,
            text="‚úÖ Ativar",
            command=self.enable_selected_task,
            height=35
        )
        self.enable_task_btn.pack(side="left", padx=5)
        
        self.disable_task_btn = ctk.CTkButton(
            task_control_frame,
            text="‚è∏Ô∏è Pausar",
            command=self.disable_selected_task,
            height=35
        )
        self.disable_task_btn.pack(side="left", padx=5)
        
        self.delete_task_btn = ctk.CTkButton(
            task_control_frame,
            text="üóëÔ∏è Excluir",
            command=self.delete_selected_task,
            height=35
        )
        self.delete_task_btn.pack(side="right", padx=5)
        
        # Status das tarefas
        status_frame = ctk.CTkFrame(self.schedule_tab)
        status_frame.grid(row=2, column=0, columnspan=2, sticky="ew", padx=10, pady=10)
        
        self.schedule_status_label = ctk.CTkLabel(status_frame, text="üìä Status: Sistema de agendamento ativo")
        self.schedule_status_label.pack(pady=10)
        
        # Carregar tarefas existentes
        self.load_scheduled_tasks()
    
    def scan_all_apps(self):
        """Busca todos os apps do sistema"""
        self.search_status.configure(text="üîç Buscando todos os aplicativos...", text_color="blue")
        
        # Mostrar barra de progresso
        self.progress_frame.grid(row=0, column=0, columnspan=2, sticky="ew", padx=10, pady=10)
        
        def scan_worker():
            try:
                def progress_callback(step_name, current, total):
                    progress = current / total
                    self.after(0, lambda: self.update_scan_progress(step_name, progress))
                
                # Executar busca
                apps_found = self.universal_scanner.scan_all_apps(progress_callback)
                
                # Atualizar interface
                self.after(0, lambda: self.finish_app_scan(apps_found))
                
            except Exception as e:
                self.after(0, lambda: self.scan_error(str(e)))
        
        threading.Thread(target=scan_worker, daemon=True).start()
    
    def update_scan_progress(self, step_name: str, progress: float):
        """Atualiza progresso da busca"""
        self.progress_bar.set(progress)
        self.progress_label.configure(text=step_name)
    
    def finish_app_scan(self, apps_found: Dict[str, AppInfo]):
        """Finaliza busca de apps"""
        self.apps_list = list(apps_found.values())
        
        # Esconder progresso
        self.progress_frame.grid_forget()
        
        # Atualizar interface
        self.update_apps_display()
        self.update_stats_display()
        
        # Status
        app_count = len(apps_found)
        self.search_status.configure(
            text=f"‚úÖ {app_count} aplicativos encontrados! Use a barra de pesquisa para filtrar.",
            text_color="green"
        )
    
    def scan_error(self, error_msg: str):
        """Erro na busca"""
        self.progress_frame.grid_forget()
        self.search_status.configure(text=f"‚ùå Erro na busca: {error_msg}", text_color="red")
    
    def on_search_changed(self, event=None):
        """Quando o texto da pesquisa muda"""
        if not self.apps_list:
            return
        
        query = self.search_entry.get().strip()
        if not query:
            self.update_apps_display()
            return
        
        # Filtrar apps
        filtered_apps = self.universal_scanner.search_apps(query)
        self.update_apps_display(filtered_apps)
        
        # Atualizar status
        self.search_status.configure(
            text=f"üîç {len(filtered_apps)} apps encontrados para '{query}'",
            text_color="blue"
        )
    
    def update_apps_display(self, apps_to_show: Optional[List[AppInfo]] = None):
        """Atualiza exibi√ß√£o de apps"""
        # Limpar lista atual
        for widget in self.apps_scroll_frame.winfo_children():
            widget.destroy()
        
        # Apps para mostrar
        apps_to_display = apps_to_show if apps_to_show is not None else self.apps_list
        
        if not apps_to_display:
            no_apps_label = ctk.CTkLabel(
                self.apps_scroll_frame,
                text="üîç Nenhum aplicativo encontrado.\nClique em 'Buscar Todos os Apps' para come√ßar.",
                font=("Arial", 12)
            )
            no_apps_label.pack(pady=20)
            return
        
        # Mostrar apps
        for i, app in enumerate(apps_to_display):
            app_frame = ctk.CTkFrame(self.apps_scroll_frame)
            app_frame.pack(pady=5, padx=10, fill="x")
            
            # Info do app
            info_text = f"üì± {app.name}"
            if app.app_type == "uwp_app":
                info_text += " (Microsoft Store)"
            elif app.publisher:
                info_text += f" - {app.publisher}"
            
            app_label = ctk.CTkLabel(app_frame, text=info_text, font=("Arial", 11))
            app_label.pack(side="left", padx=10, pady=5)
            
            # Bot√£o selecionar
            select_btn = ctk.CTkButton(
                app_frame,
                text="‚ûï Selecionar",
                command=lambda a=app: self.select_app(a),
                width=100,
                height=30
            )
            select_btn.pack(side="right", padx=10, pady=5)
    
    def select_app(self, app: AppInfo):
        """Seleciona um app"""
        if app not in self.selected_apps:
            self.selected_apps.append(app)
            self.update_selected_display()
    
    def update_selected_display(self):
        """Atualiza lista de apps selecionados"""
        self.selected_listbox.delete(0, tk.END)
        for app in self.selected_apps:
            self.selected_listbox.insert(tk.END, f"üì± {app.name}")
    
    def launch_selected_apps(self):
        """Executa apps selecionados"""
        if not self.selected_apps:
            messagebox.showwarning("Aviso", "Selecione pelo menos um aplicativo!")
            return
        
        try:
            results = self.universal_scanner.launch_multiple_apps(self.selected_apps)
            
            success_count = sum(1 for success in results.values() if success)
            total_count = len(results)
            
            if success_count == total_count:
                messagebox.showinfo("Sucesso", f"‚úÖ Todos os {total_count} apps foram executados!")
            else:
                failed_apps = [name for name, success in results.items() if not success]
                messagebox.showwarning(
                    "Parcialmente Executado",
                    f"‚úÖ {success_count}/{total_count} apps executados.\n\n‚ùå Falharam:\n" + "\n".join(failed_apps)
                )
                
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao executar apps: {e}")
    
    def clear_selection(self):
        """Limpa sele√ß√£o de apps"""
        self.selected_apps.clear()
        self.update_selected_display()
    
    def update_stats_display(self):
        """Atualiza estat√≠sticas"""
        total_apps = len(self.apps_list)
        selected_apps = len(self.selected_apps)
        
        # Contar por tipo
        app_types = {}
        for app in self.apps_list:
            app_type = app.app_type
            app_types[app_type] = app_types.get(app_type, 0) + 1
        
        stats_text = f"""üìä ESTAT√çSTICAS
        
üì± Total de Apps: {total_apps}
üéØ Selecionados: {selected_apps}

üìÇ Por Tipo:
"""
        
        for app_type, count in app_types.items():
            type_name = {
                "application": "Aplicativos",
                "uwp_app": "Microsoft Store",
                "game": "Jogos"
            }.get(app_type, app_type.title())
            
            stats_text += f"‚Ä¢ {type_name}: {count}\n"
        
        self.stats_text.delete("1.0", "end")
        self.stats_text.insert("1.0", stats_text)
    
    # M√©todos de Otimiza√ß√£o
    def quick_cleanup(self):
        """Limpeza r√°pida do sistema"""
        self.log_optimization("üßπ Iniciando limpeza r√°pida...")
        
        def cleanup_worker():
            try:
                # Executar limpezas reais
                self.after(0, lambda: self.log_optimization("  üóÇÔ∏è Limpando cache de navegadores..."))
                self.advanced_cleaner.clean_browser_profiles_deep()
                
                self.after(0, lambda: self.log_optimization("  üñºÔ∏è Limpando cache de miniaturas..."))
                self.advanced_cleaner.clean_thumbnail_cache()
                
                self.after(0, lambda: self.log_optimization("  üìã Limpando logs do sistema..."))
                self.advanced_cleaner.clean_windows_event_logs()
                
                self.after(0, lambda: self.log_optimization("  üìÅ Removendo drivers antigos..."))
                self.advanced_cleaner.clean_old_drivers()
                
                self.after(0, lambda: self.log_optimization("‚úÖ Limpeza r√°pida conclu√≠da!"))
                self.after(0, lambda: messagebox.showinfo("Sucesso", "üßπ Limpeza r√°pida executada com sucesso!\n\n‚úì Cache de navegadores\n‚úì Miniaturas\n‚úì Logs do sistema\n‚úì Drivers antigos"))
                
            except Exception as e:
                error_msg = str(e)
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro na limpeza: {error_msg}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro na limpeza: {error_msg}"))
        
        threading.Thread(target=cleanup_worker, daemon=True).start()
    
    def enable_gaming_mode(self):
        """Ativa modo gaming"""
        self.log_optimization("üéÆ Ativando modo gaming...")
        
        def gaming_worker():
            try:
                # Executar otimiza√ß√µes reais para gaming
                self.after(0, lambda: self.log_optimization("  üéØ Otimizando performance para gaming..."))
                self.advanced_optimizer.optimize_gaming_performance()
                
                self.after(0, lambda: self.log_optimization("  ‚ö° Otimizando agendamento de CPU..."))
                self.advanced_optimizer.optimize_cpu_scheduling()
                
                self.after(0, lambda: self.log_optimization("  üíæ Otimizando gerenciamento de mem√≥ria..."))
                self.advanced_optimizer.optimize_memory_management()
                
                self.after(0, lambda: self.log_optimization("  üíΩ Otimizando performance de armazenamento..."))
                self.advanced_optimizer.optimize_storage_performance()
                
                self.after(0, lambda: self.log_optimization("‚úÖ Modo gaming ativo!"))
                self.after(0, lambda: messagebox.showinfo("Gaming Mode", "üéÆ Modo gaming ativado!\n\n‚úì Performance otimizada\n‚úì CPU priorizada\n‚úì Mem√≥ria otimizada\n‚úì Armazenamento acelerado\n\nSistema pronto para jogos!"))
                
            except Exception as e:
                error_msg = str(e)
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro no modo gaming: {error_msg}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro no modo gaming: {error_msg}"))
        
        threading.Thread(target=gaming_worker, daemon=True).start()
    
    def boost_performance(self):
        """Boost de performance"""
        self.log_optimization("‚ö° Executando boost de performance...")
        
        def boost_worker():
            try:
                # Executar otimiza√ß√µes reais de performance
                self.after(0, lambda: self.log_optimization("  üîß Otimizando gerenciamento de mem√≥ria..."))
                self.advanced_optimizer.optimize_memory_management()
                
                self.after(0, lambda: self.log_optimization("  ‚ö° Configurando agendamento de CPU..."))
                self.advanced_optimizer.optimize_cpu_scheduling()
                
                self.after(0, lambda: self.log_optimization("  üíΩ Otimizando performance de armazenamento..."))
                self.advanced_optimizer.optimize_storage_performance()
                
                self.after(0, lambda: self.log_optimization("  üßπ Limpando cache do sistema..."))
                self.advanced_cleaner.clean_thumbnail_cache()
                
                self.after(0, lambda: self.log_optimization("  üîç Otimizando busca do Windows..."))
                self.advanced_optimizer.optimize_windows_search()
                
                self.after(0, lambda: self.log_optimization("‚úÖ Performance otimizada!"))
                self.after(0, lambda: messagebox.showinfo("Performance", "‚ö° Boost aplicado!\n\n‚úì Mem√≥ria otimizada\n‚úì CPU configurada\n‚úì Armazenamento acelerado\n‚úì Cache limpo\n‚úì Busca otimizada\n\nSistema mais r√°pido!"))
                
            except Exception as e:
                error_msg = str(e)
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro no boost: {error_msg}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro no boost: {error_msg}"))
        
        threading.Thread(target=boost_worker, daemon=True).start()
    
    def generate_system_report(self):
        """Gera relat√≥rio do sistema"""
        try:
            metrics = self.system_monitor.collect_metrics()
            health_score = self.system_monitor.calculate_health_score(metrics)
            
            report = f"""üìä RELAT√ìRIO DO SISTEMA
            
üñ•Ô∏è Performance Atual:
‚Ä¢ CPU: {metrics.get('cpu_percent', 'N/A')}%
‚Ä¢ Mem√≥ria: {metrics.get('memory_percent', 'N/A')}%
‚Ä¢ Disco: {metrics.get('disk_percent', 'N/A')}%

üíØ Health Score: {health_score}/100

üìÖ Gerado em: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}

üîß Recomenda√ß√µes:
‚Ä¢ Execute limpeza se Health Score < 70
‚Ä¢ Use modo gaming para jogos
‚Ä¢ Monitore processos com alto uso de CPU
            """.strip()
            
            # Salvar relat√≥rio
            filename = f"relatorio_sistema_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(report)
            
            self.log_optimization(f"üìä Relat√≥rio salvo: {filename}")
            messagebox.showinfo("Relat√≥rio", f"üìä Relat√≥rio gerado!\n\nSalvo como: {filename}\n\nHealth Score: {health_score}/100")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao gerar relat√≥rio: {e}")
    
    def custom_optimization(self):
        """Otimiza√ß√£o personalizada baseada nas op√ß√µes selecionadas"""
        selected_options = []
        
        if self.opt_registry.get():
            selected_options.append("registry")
        if self.opt_temp_files.get():
            selected_options.append("temp_files")
        if self.opt_startup.get():
            selected_options.append("startup")
        if self.opt_services.get():
            selected_options.append("services")
        if self.opt_network.get():
            selected_options.append("network")
        if self.opt_graphics.get():
            selected_options.append("graphics")
        
        if not selected_options:
            messagebox.showwarning("Aviso", "Selecione pelo menos uma op√ß√£o de otimiza√ß√£o!")
            return
        
        self.log_optimization(f"üîß Iniciando otimiza√ß√£o personalizada: {', '.join(selected_options)}")
        
        def custom_worker():
            try:
                optimization_count = 0
                
                for option in selected_options:
                    self.after(0, lambda o=option: self.log_optimization(f"  ‚öôÔ∏è Otimizando {o.replace('_', ' ').title()}..."))
                    
                    if option == "registry":
                        # Limpeza de logs e eventos do sistema
                        self.advanced_cleaner.clean_windows_event_logs()
                        optimization_count += 1
                        self.after(0, lambda: self.log_optimization("    ‚úì Logs do sistema limpos"))
                        
                    elif option == "temp_files":
                        # Limpeza de arquivos tempor√°rios e cache
                        self.advanced_cleaner.clean_browser_profiles_deep()
                        self.advanced_cleaner.clean_thumbnail_cache()
                        optimization_count += 2
                        self.after(0, lambda: self.log_optimization("    ‚úì Cache de navegadores limpo"))
                        self.after(0, lambda: self.log_optimization("    ‚úì Cache de miniaturas limpo"))
                        
                    elif option == "startup":
                        # Otimiza√ß√£o de programas de inicializa√ß√£o
                        self.advanced_optimizer.optimize_startup_programs()
                        optimization_count += 1
                        self.after(0, lambda: self.log_optimization("    ‚úì Programas de inicializa√ß√£o otimizados"))
                        
                    elif option == "services":
                        # Otimiza√ß√£o de servi√ßos do sistema
                        self.advanced_optimizer.optimize_memory_management()
                        self.advanced_optimizer.optimize_cpu_scheduling()
                        optimization_count += 2
                        self.after(0, lambda: self.log_optimization("    ‚úì Gerenciamento de mem√≥ria otimizado"))
                        self.after(0, lambda: self.log_optimization("    ‚úì Servi√ßos do sistema otimizados"))
                        
                    elif option == "network":
                        # Otimiza√ß√£o de rede
                        try:
                            from optimizer.network import NetworkOptimizer
                            network_opt = NetworkOptimizer()
                            
                            self.after(0, lambda: self.log_optimization("    üåê Otimizando DNS..."))
                            network_opt.optimize_dns()
                            
                            self.after(0, lambda: self.log_optimization("    üåê Otimizando TCP..."))
                            network_opt.optimize_tcp_settings()
                            
                            self.after(0, lambda: self.log_optimization("    üåê Otimizando adaptador..."))
                            network_opt.optimize_network_adapter()
                            
                            optimization_count += 3
                            self.after(0, lambda: self.log_optimization("    ‚úì Todas as otimiza√ß√µes de rede aplicadas"))
                        except Exception as e:
                            self.after(0, lambda: self.log_optimization(f"    ‚ö†Ô∏è Erro na otimiza√ß√£o de rede: {e}"))
                            optimization_count += 1
                        
                    elif option == "graphics":
                        # Otimiza√ß√£o para gaming/gr√°ficos
                        self.advanced_optimizer.optimize_gaming_performance()
                        self.advanced_optimizer.optimize_storage_performance()
                        optimization_count += 2
                        self.after(0, lambda: self.log_optimization("    ‚úì Performance de gaming otimizada"))
                        self.after(0, lambda: self.log_optimization("    ‚úì Performance de armazenamento otimizada"))
                
                self.after(0, lambda: self.log_optimization(f"‚úÖ Otimiza√ß√£o personalizada conclu√≠da! {optimization_count} otimiza√ß√µes aplicadas."))
                
                summary = f"‚úÖ Otimiza√ß√£o conclu√≠da!\n\nüìä Resultados:\n‚Ä¢ {optimization_count} otimiza√ß√µes aplicadas\n\nüéØ √Åreas otimizadas:\n‚Ä¢ " + "\n‚Ä¢ ".join([o.replace('_', ' ').title() for o in selected_options])
                
                self.after(0, lambda: messagebox.showinfo("Sucesso", summary))
                
            except Exception as e:
                error_msg = str(e)
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro na otimiza√ß√£o: {error_msg}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro durante otimiza√ß√£o: {error_msg}"))
        
        threading.Thread(target=custom_worker, daemon=True).start()
    
    def advanced_system_optimization(self):
        """‚ö° Executa otimiza√ß√µes avan√ßadas do sistema"""
        if not messagebox.askyesno("Otimiza√ß√µes Avan√ßadas", 
                                   "üö® ATEN√á√ÉO: Estas otimiza√ß√µes s√£o AVAN√áADAS e podem alterar configura√ß√µes profundas do sistema.\n\n"
                                   "Inclui:\n"
                                   "üîß Desativa√ß√£o de servi√ßos do sistema\n"
                                   "üß† Otimiza√ß√µes de registro avan√ßadas\n"
                                   "üåê Configura√ß√µes avan√ßadas de rede\n"
                                   "üß™ Desativa√ß√£o de diagn√≥sticos\n\n"
                                   "‚ö†Ô∏è Recomendado criar um ponto de restaura√ß√£o antes.\n\n"
                                   "Continuar?"):
            return
        
        self.log_optimization("‚ö° Iniciando otimiza√ß√µes avan√ßadas do sistema...")
        self.advanced_optimize_btn.configure(state="disabled", text="üîÑ Otimizando...")
        
        def advanced_worker():
            try:
                # Callback para atualizar progresso
                def update_progress(message, progress):
                    self.after(0, lambda: self.log_optimization(f"    üìù {message}"))
                
                # Executar todas as otimiza√ß√µes avan√ßadas
                total_optimizations = self.advanced_optimizer.apply_all_advanced_optimizations(update_progress)
                
                # Resumo final
                self.after(0, lambda: self.log_optimization("‚úÖ Otimiza√ß√µes avan√ßadas conclu√≠das!"))
                
                summary = (f"‚úÖ Otimiza√ß√µes Avan√ßadas Conclu√≠das!\n\n"
                          f"üìä Total de otimiza√ß√µes aplicadas: {total_optimizations}\n\n"
                          f"üîß Categorias otimizadas:\n"
                          f"‚Ä¢ Sistema e Hardware\n"
                          f"‚Ä¢ Registro Avan√ßado\n"
                          f"‚Ä¢ Rede e Internet\n"
                          f"‚Ä¢ Diagn√≥stico e Monitoramento\n\n"
                          f"üí° Recomenda-se reiniciar o sistema para aplicar todas as mudan√ßas.")
                
                self.after(0, lambda: messagebox.showinfo("Sucesso", summary))
                
            except Exception as e:
                error_msg = str(e)
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro nas otimiza√ß√µes avan√ßadas: {error_msg}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro durante otimiza√ß√µes avan√ßadas: {error_msg}"))
            
            finally:
                self.after(0, lambda: self.advanced_optimize_btn.configure(state="normal", text="‚ö° Otimiza√ß√µes Avan√ßadas do Sistema"))
        
        threading.Thread(target=advanced_worker, daemon=True).start()
    
    def ultra_advanced_system_optimization(self):
        """üöÄ Executa otimiza√ß√µes ULTRA AVAN√áADAS do sistema - M√ÅXIMA PERFORMANCE"""
        warning_message = (
            "üö® ATEN√á√ÉO M√ÅXIMA: OTIMIZA√á√ïES ULTRA AVAN√áADAS! üö®\n\n"
            "‚ö†Ô∏è ESTAS S√ÉO AS OTIMIZA√á√ïES MAIS EXTREMAS DISPON√çVEIS!\n\n"
            "üìã INCLUI TODAS AS OTIMIZA√á√ïES ANTERIORES MAIS:\n"
            "üîß Sistema e Boot: Desativa√ß√£o de verifica√ß√£o de assinatura de driver\n"
            "üß† Kernel: Otimiza√ß√µes de prioridade e resposta (1ms mouse/teclado)\n"
            "üåê Rede Ultra: TCP/IP otimizado, NetBIOS desabilitado\n"
            "üõ† Extras: Hyper-V, WSL, Windows Defender desabilitados\n"
            "üß™ Telemetria: COMPLETAMENTE eliminada\n\n"
            "‚ö†Ô∏è RISCOS:\n"
            "‚Ä¢ Pode afetar compatibilidade com alguns softwares\n"
            "‚Ä¢ Pode desabilitar recursos de seguran√ßa\n"
            "‚Ä¢ Mudan√ßas muito profundas no sistema\n\n"
            "üí° RECOMENDADO APENAS PARA:\n"
            "‚Ä¢ PCs dedicados exclusivamente para gaming\n"
            "‚Ä¢ Usu√°rios experientes\n"
            "‚Ä¢ Sistemas com backup completo\n\n"
            "üîÑ CRIAR PONTO DE RESTAURA√á√ÉO √â OBRIGAT√ìRIO!\n\n"
            "Continuar com as otimiza√ß√µes ULTRA AVAN√áADAS?"
        )
        
        if not messagebox.askyesno("üöÄ OTIMIZA√á√ïES ULTRA AVAN√áADAS", warning_message):
            return
        
        # Confirma√ß√£o adicional
        if not messagebox.askyesno("Confirma√ß√£o Final", 
                                   "üî¥ √öLTIMA CONFIRMA√á√ÉO!\n\n"
                                   "Voc√™ est√° prestes a aplicar as otimiza√ß√µes mais extremas poss√≠veis.\n"
                                   "Isto pode alterar profundamente o comportamento do sistema.\n\n"
                                   "TEM CERTEZA ABSOLUTA?"):
            return
        
        self.log_optimization("üöÄ Iniciando otimiza√ß√µes ULTRA AVAN√áADAS do sistema...")
        self.ultra_advanced_optimize_btn.configure(state="disabled", text="üîÑ Otimizando ULTRA...")
        
        def ultra_advanced_worker():
            try:
                # Callback para atualizar progresso
                def update_progress(message, progress):
                    self.after(0, lambda: self.log_optimization(f"    üîß {message}"))
                
                # Executar TODAS as otimiza√ß√µes ultra avan√ßadas
                total_optimizations = self.advanced_optimizer.apply_all_ultra_advanced_optimizations(update_progress)
                
                # Resumo final
                self.after(0, lambda: self.log_optimization("üöÄ OTIMIZA√á√ïES ULTRA AVAN√áADAS CONCLU√çDAS!"))
                
                summary = (f"üöÄ OTIMIZA√á√ïES ULTRA AVAN√áADAS CONCLU√çDAS!\n\n"
                          f"üìä Total de otimiza√ß√µes aplicadas: {total_optimizations}\n\n"
                          f"üîß Categorias Ultra Otimizadas:\n"
                          f"‚Ä¢ Sistema e Boot (verifica√ß√£o de driver desabilitada)\n"
                          f"‚Ä¢ Kernel e Registro (resposta 1ms mouse/teclado)\n"
                          f"‚Ä¢ Rede Ultra Avan√ßada (TCP/IP extremo)\n"
                          f"‚Ä¢ Recursos Extras (Hyper-V, WSL, Defender)\n"
                          f"‚Ä¢ Telemetria Ultra (100% eliminada)\n"
                          f"‚Ä¢ TODAS as otimiza√ß√µes anteriores inclu√≠das\n\n"
                          f"üéÆ PERFORMANCE M√ÅXIMA ALCAN√áADA!\n\n"
                          f"‚ö†Ô∏è REINICIALIZA√á√ÉO OBRIGAT√ìRIA para aplicar todas as mudan√ßas.\n\n"
                          f"üéØ Seu sistema agora est√° otimizado ao EXTREMO para gaming!")
                
                self.after(0, lambda: messagebox.showinfo("üöÄ SUCESSO ULTRA", summary))
                
            except Exception as e:
                error_msg = str(e)
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro nas otimiza√ß√µes ULTRA: {error_msg}"))
                self.after(0, lambda: messagebox.showerror("Erro Ultra", f"Erro durante otimiza√ß√µes ULTRA: {error_msg}"))
            
            finally:
                self.after(0, lambda: self.ultra_advanced_optimize_btn.configure(state="normal", text="üöÄ OTIMIZA√á√ïES ULTRA AVAN√áADAS - M√ÅXIMA PERFORMANCE"))
        
        threading.Thread(target=ultra_advanced_worker, daemon=True).start()
    
    def log_optimization(self, message: str):
        """Adiciona mensagem ao log de otimiza√ß√£o"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_entry = f"[{timestamp}] {message}\n"
        
        self.optimization_log.insert("end", log_entry)
        self.optimization_log.see("end")
    
    # M√©todos de Monitoramento
    def start_monitoring(self):
        """Inicia monitoramento cont√≠nuo"""
        self.update_monitoring()
    
    def update_monitoring(self):
        """Atualiza m√©tricas de monitoramento"""
        try:
            self.current_metrics = self.system_monitor.collect_metrics()
            
            # Atualizar barras de progresso
            cpu_percent = self.current_metrics.get('cpu_percent', 0)
            memory_percent = self.current_metrics.get('memory_percent', 0)
            disk_percent = self.current_metrics.get('disk_percent', 0)
            
            self.cpu_progress.set(cpu_percent / 100)
            self.cpu_label.configure(text=f"üñ•Ô∏è CPU: {cpu_percent:.1f}%")
            
            self.ram_progress.set(memory_percent / 100)
            self.ram_label.configure(text=f"üíæ RAM: {memory_percent:.1f}%")
            
            self.disk_progress.set(disk_percent / 100)
            self.disk_label.configure(text=f"üíΩ Disco: {disk_percent:.1f}%")
            
            # Temperatura (se dispon√≠vel)
            temp = self.current_metrics.get('temperature')
            if temp:
                self.temp_label.configure(text=f"üå°Ô∏è Temperatura: {temp}¬∞C")
            
            # Atualizar processos
            self.update_processes_display()
            
            # Health Score
            health_score = self.system_monitor.calculate_health_score(self.current_metrics)
            health_color = "green" if health_score >= 80 else "orange" if health_score >= 60 else "red"
            self.health_label.configure(
                text=f"üíØ Health Score: {health_score}/100",
                text_color=health_color
            )
            
        except Exception as e:
            print(f"Erro no monitoramento: {e}")
        
        # Reagendar pr√≥xima atualiza√ß√£o
        self.after(2000, self.update_monitoring)
    
    def update_processes_display(self):
        """Atualiza exibi√ß√£o de processos"""
        try:
            processes = self.system_monitor.get_top_processes(limit=10)
            
            processes_text = "üîÑ PROCESSOS COM MAIOR USO:\n\n"
            
            for i, proc in enumerate(processes, 1):
                processes_text += f"{i:2d}. {proc['name'][:20]:<20} | CPU: {proc['cpu_percent']:5.1f}% | RAM: {proc['memory_percent']:5.1f}%\n"
            
            self.processes_text.delete("1.0", "end")
            self.processes_text.insert("1.0", processes_text)
            
        except Exception as e:
            self.processes_text.delete("1.0", "end")
            self.processes_text.insert("1.0", f"Erro ao obter processos: {e}")
    
    def refresh_monitoring(self):
        """For√ßa atualiza√ß√£o do monitoramento"""
        self.update_monitoring()
        messagebox.showinfo("Atualizado", "üìä Monitoramento atualizado!")
    
    def kill_selected_process(self):
        """Finaliza processo selecionado"""
        # Implementar sele√ß√£o e finaliza√ß√£o de processo
        messagebox.showinfo("Aviso", "Funcionalidade em desenvolvimento!")
    
    # M√©todos de Agendamento
    def add_scheduled_task(self):
        """Adiciona nova tarefa agendada"""
        try:
            name = self.task_name_entry.get().strip()
            task_type = self.task_type_combo.get()
            frequency = self.frequency_combo.get()
            hour = int(self.hour_combo.get())
            minute = int(self.minute_combo.get())
            
            if not name:
                messagebox.showwarning("Aviso", "Digite um nome para a tarefa!")
                return
            
            # Criar tarefa
            task_info = {
                'name': name,
                'type': task_type,
                'frequency': frequency,
                'hour': hour,
                'minute': minute,
                'enabled': True,
                'created': datetime.now().isoformat()
            }
            
            # Adicionar √† lista
            self.tasks_listbox.insert(tk.END, f"‚úÖ {name} - {task_type} ({frequency} √†s {hour:02d}:{minute:02d})")
            
            # Limpar campos
            self.task_name_entry.delete(0, 'end')
            
            messagebox.showinfo("Sucesso", f"‚úÖ Tarefa '{name}' adicionada com sucesso!")
            
        except Exception as e:
            messagebox.showerror("Erro", f"Erro ao adicionar tarefa: {e}")
    
    def enable_selected_task(self):
        """Ativa tarefa selecionada"""
        selection = self.tasks_listbox.curselection()
        if selection:
            messagebox.showinfo("Ativado", "‚úÖ Tarefa ativada!")
        else:
            messagebox.showwarning("Aviso", "Selecione uma tarefa!")
    
    def disable_selected_task(self):
        """Pausa tarefa selecionada"""
        selection = self.tasks_listbox.curselection()
        if selection:
            messagebox.showinfo("Pausado", "‚è∏Ô∏è Tarefa pausada!")
        else:
            messagebox.showwarning("Aviso", "Selecione uma tarefa!")
    
    def delete_selected_task(self):
        """Exclui tarefa selecionada"""
        selection = self.tasks_listbox.curselection()
        if selection:
            if messagebox.askyesno("Confirmar", "Deseja realmente excluir a tarefa?"):
                self.tasks_listbox.delete(selection[0])
                messagebox.showinfo("Exclu√≠do", "üóëÔ∏è Tarefa exclu√≠da!")
        else:
            messagebox.showwarning("Aviso", "Selecione uma tarefa!")
    
    def load_scheduled_tasks(self):
        """Carrega tarefas agendadas salvas"""
        # Adicionar algumas tarefas de exemplo
        example_tasks = [
            "‚úÖ Limpeza Autom√°tica - Limpeza R√°pida (Di√°rio √†s 02:00)",
            "‚úÖ Otimiza√ß√£o Semanal - Otimiza√ß√£o Completa (Semanal √†s 03:00)",
            "‚è∏Ô∏è Backup Gaming - Backup (Mensal √†s 01:00)"
        ]
        
        for task in example_tasks:
            self.tasks_listbox.insert(tk.END, task)
    
    def open_special_modes(self):
        """Abre a janela de modos especiais"""
        try:
            # Criar uma nova janela simplificada de modos especiais
            import tkinter as tk
            
            # Verificar se j√° existe uma janela aberta
            if hasattr(self, 'special_modes_window') and self.special_modes_window.winfo_exists():
                self.special_modes_window.lift()  # Trazer para frente
                self.special_modes_window.focus()
                return
            
            # Criar nova janela simplificada
            self.special_modes_window = tk.Toplevel(self)
            self.special_modes_window.title("üöÄ Modos Especiais")
            self.special_modes_window.geometry("600x400")
            self.special_modes_window.configure(bg="#2b2b2b")
            
            # Label informativo
            info_label = tk.Label(
                self.special_modes_window,
                text="üöÄ MODOS ESPECIAIS DISPON√çVEIS\n\nUse os bot√µes na aba principal 'Otimiza√ß√£o'",
                bg="#2b2b2b",
                fg="white",
                font=("Arial", 14),
                justify="center"
            )
            info_label.pack(pady=50)
            
            # Bot√£o para fechar
            close_btn = tk.Button(
                self.special_modes_window,
                text="Fechar",
                command=self.special_modes_window.destroy,
                bg="#cc0000",
                fg="white",
                font=("Arial", 12)
            )
            close_btn.pack(pady=20)
            
        except Exception as e:
            messagebox.showerror(
                "Erro", 
                f"Erro ao abrir Modos Especiais:\n{e}\n\n"
                "Verifique se todos os m√≥dulos est√£o instalados corretamente."
            )
    
    # === MODOS ESPECIAIS COMBINADOS ===
    
    def activate_turbo_gaming_mode(self):
        """üöÄ MODO TURBO GAMING - Combina Turbo + Gaming Preparation"""
        if not messagebox.askyesno("MODO TURBO GAMING", 
                                   "üöÄ MODO TURBO GAMING\n\n" +
                                   "‚úÖ ATIVAR√Å:\n" +
                                   "‚Ä¢ Performance m√°xima de CPU/GPU\n" +
                                   "‚Ä¢ Prioridade alta para jogos\n" +
                                   "‚Ä¢ Limpeza autom√°tica de RAM\n" +
                                   "‚Ä¢ Configura√ß√µes de rede otimizadas\n\n" +
                                   "‚ùå DESATIVAR√Å:\n" +
                                   "‚Ä¢ Servi√ßos desnecess√°rios\n" +
                                   "‚Ä¢ Efeitos visuais\n" +
                                   "‚Ä¢ Indexa√ß√£o e busca\n" +
                                   "‚Ä¢ Processos em background\n\n" +
                                   "üé§ √ÅUDIO: Totalmente protegido!\n\n" +
                                   "Continuar?"):
            return
        
        def turbo_worker():
            try:
                self.after(0, lambda: self.log_optimization("üöÄ INICIANDO MODO TURBO GAMING..."))
                
                # Inicializar special modes
                from optimizer.special_modes import SpecialModes
                special_modes = SpecialModes(self.advanced_optimizer)
                
                # Aplicar modo turbo
                self.after(0, lambda: self.log_optimization("‚ö° Aplicando modo Turbo..."))
                turbo_result = special_modes.activate_turbo_mode()
                
                # Preparar sistema para gaming
                self.after(0, lambda: self.log_optimization("üéÆ Preparando sistema para jogos..."))
                special_modes._prepare_system_for_gaming()
                special_modes._optimize_cpu_priorities()
                
                self.after(0, lambda: self.log_optimization("‚úÖ MODO TURBO GAMING ATIVADO!"))
                self.after(0, lambda: messagebox.showinfo("Sucesso", 
                          f"üöÄ MODO TURBO GAMING ATIVADO!\n\n" +
                          f"üìä Otimiza√ß√µes aplicadas: {len(turbo_result.get('optimizations', []))}\n" +
                          f"üéØ Sistema otimizado para m√°xima performance em jogos!"))
                
            except Exception as e:
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro no Modo Turbo Gaming: {e}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro no Modo Turbo Gaming: {e}"))
        
        threading.Thread(target=turbo_worker, daemon=True).start()
    
    def activate_benchmark_complete_mode(self):
        """üìä MODO BENCHMARK COMPLETO - Combina Benchmark + Deep Clean"""
        if not messagebox.askyesno("MODO BENCHMARK COMPLETO", 
                                   "üìä MODO BENCHMARK COMPLETO\n\n" +
                                   "‚úÖ ATIVAR√Å:\n" +
                                   "‚Ä¢ TODAS as otimiza√ß√µes do sistema\n" +
                                   "‚Ä¢ Relat√≥rios detalhados de performance\n" +
                                   "‚Ä¢ Limpeza profunda completa\n" +
                                   "‚Ä¢ Coleta de m√©tricas antes/depois\n\n" +
                                   "üßπ LIMPAR√Å:\n" +
                                   "‚Ä¢ Arquivos tempor√°rios (GB)\n" +
                                   "‚Ä¢ Cache de aplicativos\n" +
                                   "‚Ä¢ Logs do sistema\n" +
                                   "‚Ä¢ Entradas √≥rf√£s do registro\n\n" +
                                   "üìà RESULTADO: Relat√≥rio completo\n\n" +
                                   "Continuar?"):
            return
        
        def benchmark_worker():
            try:
                self.after(0, lambda: self.log_optimization("üìä INICIANDO MODO BENCHMARK COMPLETO..."))
                
                from optimizer.special_modes import SpecialModes
                special_modes = SpecialModes(self.advanced_optimizer)
                
                # Aplicar benchmark mode
                self.after(0, lambda: self.log_optimization("üìà Executando benchmark completo..."))
                benchmark_result = special_modes.activate_benchmark_mode()
                
                # Aplicar deep clean
                self.after(0, lambda: self.log_optimization("üßπ Executando limpeza profunda..."))
                clean_result = special_modes.activate_deep_clean_mode()
                
                total_space = clean_result.get('total_space_freed', 0)
                
                self.after(0, lambda: self.log_optimization("‚úÖ MODO BENCHMARK COMPLETO CONCLU√çDO!"))
                self.after(0, lambda: messagebox.showinfo("Sucesso", 
                          f"üìä MODO BENCHMARK COMPLETO CONCLU√çDO!\n\n" +
                          f"üßπ Espa√ßo liberado: {total_space} MB\n" +
                          f"üìà Relat√≥rio salvo em: logs/reports/\n" +
                          f"üéØ Sistema completamente otimizado e limpo!"))
                
            except Exception as e:
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro no Modo Benchmark: {e}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro no Modo Benchmark: {e}"))
        
        threading.Thread(target=benchmark_worker, daemon=True).start()
    
    def activate_extreme_total_mode(self):
        """‚ö° MODO EXTREMO TOTAL - Combina Extremo + Silencioso"""
        if not messagebox.askyesno("‚ö†Ô∏è MODO EXTREMO TOTAL", 
                                   "‚ö†Ô∏è MODO EXTREMO TOTAL\n\n" +
                                   "üö® ATEN√á√ÉO: MODO MAIS AGRESSIVO!\n\n" +
                                   "‚ö° ATIVAR√Å:\n" +
                                   "‚Ä¢ TODAS configura√ß√µes extremas\n" +
                                   "‚Ä¢ CPU: Prioridades m√°ximas\n" +
                                   "‚Ä¢ GPU: Performance extrema\n" +
                                   "‚Ä¢ RAM: Otimiza√ß√µes agressivas\n" +
                                   "‚Ä¢ REDE: Configura√ß√µes extremas\n\n" +
                                   "üîá DESATIVAR√Å:\n" +
                                   "‚Ä¢ Telemetria e rastreamento\n" +
                                   "‚Ä¢ Recursos visuais\n" +
                                   "‚Ä¢ Funcionalidades desnecess√°rias\n" +
                                   "‚Ä¢ Servi√ßos opcionais\n\n" +
                                   "üé§ √ÅUDIO: Sempre protegido!\n" +
                                   "‚ö†Ô∏è Recomendado para usu√°rios experientes\n\n" +
                                   "Continuar?"):
            return
        
        def extreme_worker():
            try:
                self.after(0, lambda: self.log_optimization("‚ö° INICIANDO MODO EXTREMO TOTAL..."))
                
                from optimizer.special_modes import SpecialModes
                special_modes = SpecialModes(self.advanced_optimizer)
                
                # Aplicar modo extremo
                self.after(0, lambda: self.log_optimization("üö® Aplicando configura√ß√µes EXTREMAS..."))
                extreme_result = special_modes.activate_extreme_performance_mode()
                
                # Aplicar otimiza√ß√µes silenciosas adicionais
                self.after(0, lambda: self.log_optimization("üîá Aplicando otimiza√ß√µes silenciosas..."))
                special_modes._silent_network_optimization()
                special_modes._apply_extreme_cpu_settings()
                special_modes._apply_extreme_gpu_settings()
                special_modes._apply_extreme_memory_settings()
                
                self.after(0, lambda: self.log_optimization("‚úÖ MODO EXTREMO TOTAL ATIVADO!"))
                
                # Executar otimiza√ß√µes extremas de performance
                from optimizer.performance import PerformanceOptimizer
                perf_optimizer = PerformanceOptimizer()
                if hasattr(perf_optimizer, 'extreme_gaming_optimization'):
                    self.after(0, lambda: self.log_optimization("üî• Aplicando otimiza√ß√µes gaming extremas..."))
                    perf_optimizer.extreme_gaming_optimization()
                
                # Executar otimiza√ß√µes espec√≠ficas AMD
                if hasattr(self.advanced_optimizer, 'optimize_amd_specific'):
                    self.after(0, lambda: self.log_optimization("üöÄ Aplicando otimiza√ß√µes espec√≠ficas AMD..."))
                    self.advanced_optimizer.optimize_amd_specific()
                self.after(0, lambda: messagebox.showinfo("Sucesso", 
                          f"‚ö° MODO EXTREMO TOTAL ATIVADO!\n\n" +
                          f"üö® M√ÅXIMA PERFORMANCE ALCAN√áADA!\n" +
                          f"üìä Otimiza√ß√µes: {len(extreme_result.get('optimizations', []))}\n" +
                          f"‚ö†Ô∏è Monitore a estabilidade do sistema\n" +
                          f"üé§ √Åudio completamente protegido!"))
                
            except Exception as e:
                self.after(0, lambda: self.log_optimization(f"‚ùå Erro no Modo Extremo: {e}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro no Modo Extremo: {e}"))
        
        threading.Thread(target=extreme_worker, daemon=True).start()
    
    def activate_amd_beast_mode(self):
        """üî• MODO AMD BEAST - Otimiza√ß√µes espec√≠ficas e extremas para AMD"""
        if not messagebox.askyesno("üî• MODO AMD BEAST", 
                                   "üî• MODO AMD BEAST - ESPEC√çFICO AMD\n\n" +
                                   "üöÄ OTIMIZA√á√ïES INCLUEM:\n" +
                                   "‚Ä¢ AMD Ryzen: Power plan otimizado\n" +
                                   "‚Ä¢ AMD Radeon: ULPS OFF, sem throttling\n" +
                                   "‚Ä¢ HPET: Desabilitado (reduz lat√™ncia)\n" +
                                   "‚Ä¢ Memory: Timings AMD otimizados\n" +
                                   "‚Ä¢ CPU: 100% performance constante\n" +
                                   "‚Ä¢ Network: Lat√™ncia extremamente reduzida\n\n" +
                                   "üí™ IDEAL PARA:\n" +
                                   "‚Ä¢ Processadores AMD Ryzen\n" +
                                   "‚Ä¢ Placas de v√≠deo AMD Radeon\n" +
                                   "‚Ä¢ Jogos competitivos (CS2, Valorant, R6)\n\n" +
                                   "üé§ √ÅUDIO: Sempre protegido!\n\n" +
                                   "‚ö†Ô∏è APENAS para hardware AMD!\n" +
                                   "Continuar?"):
            return
        
        def amd_beast_worker():
            try:
                self.after(0, lambda: self.log_optimization("üî• INICIANDO MODO AMD BEAST..."))
                
                # Aplicar otimiza√ß√µes AMD espec√≠ficas do advanced_optimizer
                if hasattr(self.advanced_optimizer, 'optimize_amd_specific'):
                    self.after(0, lambda: self.log_optimization("üöÄ Otimiza√ß√µes AMD Ryzen + Radeon..."))
                    amd_opts = self.advanced_optimizer.optimize_amd_specific()
                    for opt in amd_opts:
                        self.after(0, lambda o=opt: self.log_optimization(f"‚úÖ {o}"))
                
                # Aplicar modo AMD Beast do special_modes
                from optimizer.special_modes import SpecialModes
                special_modes = SpecialModes(self.advanced_optimizer)
                
                self.after(0, lambda: self.log_optimization("üî• Ativando MODO AMD BEAST..."))
                result = special_modes.activate_amd_beast_mode()
                
                if result.get("success"):
                    for opt in result.get("optimizations", []):
                        self.after(0, lambda o=opt: self.log_optimization(f"‚úÖ {o}"))
                    
                    self.after(0, lambda: self.log_optimization("üî• MODO AMD BEAST ATIVADO COM SUCESSO!"))
                    self.after(0, lambda: self.log_optimization("üí™ Hardware AMD otimizado para m√°xima performance!"))
                    self.after(0, lambda: messagebox.showinfo("Sucesso", 
                                                             "üî• MODO AMD BEAST ATIVADO!\n\n" +
                                                             "Hardware AMD otimizado para m√°xima performance!\n" +
                                                             "Reinicie para aplicar todas as otimiza√ß√µes."))
                else:
                    error_msg = result.get("message", "Erro desconhecido")
                    self.after(0, lambda: self.log_optimization(f"‚ùå ERRO: {error_msg}"))
                    self.after(0, lambda: messagebox.showerror("Erro", f"Erro ao ativar AMD Beast Mode:\n{error_msg}"))
                
            except Exception as e:
                self.after(0, lambda: self.log_optimization(f"‚ùå ERRO CR√çTICO: {str(e)}"))
                self.after(0, lambda: messagebox.showerror("Erro", f"Erro cr√≠tico no AMD Beast Mode: {e}"))
        
        threading.Thread(target=amd_beast_worker, daemon=True).start()


def main():
    """Fun√ß√£o principal"""
    # Configurar CustomTkinter
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    
    # Criar e executar aplica√ß√£o
    app = AdvancedMainWindow()
    app.mainloop()


if __name__ == "__main__":
    main()