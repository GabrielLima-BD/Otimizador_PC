#!/usr/bin/env python3
"""
üöÄ Otimizador Windows 10 Pro
============================

Um otimizador completo para Windows 10 que:
- Remove arquivos desnecess√°rios e bloatware
- Otimiza configura√ß√µes de sistema e rede
- Maximiza o desempenho do PC
- Permite restaurar configura√ß√µes com seguran√ßa

Autor: Sistema de Otimiza√ß√£o Inteligente
Vers√£o: 1.0.0
Data: Setembro 2025

IMPORTANTE: Execute como administrador para obter todos os recursos!
"""

import sys
import os
import logging
import traceback
from pathlib import Path

# Adiciona o diret√≥rio atual ao path para importa√ß√µes
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

try:
    from ui import OptimizerUI
    from optimizer.utils import Utils
    import customtkinter as ctk
except ImportError as e:
    print(f"‚ùå Erro ao importar depend√™ncias: {e}")
    print("\nüì¶ Instalando depend√™ncias necess√°rias...")
    
    import subprocess
    
    # Lista de depend√™ncias necess√°rias
    required_packages = [
        'customtkinter==5.2.2',
        'psutil==5.9.8',
        'pywin32==306', 
        'requests==2.31.0',
        'Pillow==10.3.0'
    ]
    
    for package in required_packages:
        try:
            print(f"Instalando {package}...")
            subprocess.check_call([sys.executable, '-m', 'pip', 'install', package])
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erro ao instalar {package}: {e}")
    
    print("‚úÖ Depend√™ncias instaladas. Reinicie o programa.")
    input("Pressione Enter para sair...")
    sys.exit(1)

def check_system_requirements():
    """Verifica requisitos do sistema"""
    import platform
    
    # Verifica se √© Windows
    if platform.system() != 'Windows':
        print("‚ùå Este otimizador foi projetado especificamente para Windows 10/11")
        input("Pressione Enter para sair...")
        sys.exit(1)
    
    # Verifica vers√£o do Python
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 ou superior √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        input("Pressione Enter para sair...")
        sys.exit(1)
    
    print("‚úÖ Requisitos do sistema verificados")

def setup_application():
    """Configura a aplica√ß√£o"""
    try:
        # Cria diret√≥rios necess√°rios
        directories = ['logs', 'logs/backups', 'assets']
        for directory in directories:
            os.makedirs(directory, exist_ok=True)
        
        # Configura logging
        logger = Utils.setup_logging()
        logger.info("Otimizador Windows 10 Pro iniciado")
        logger.info(f"Sistema: {Utils.get_system_info()}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na configura√ß√£o: {e}")
        return False

def show_welcome_message():
    """Mostra mensagem de boas-vindas"""
    welcome_text = """
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                üöÄ OTIMIZADOR WINDOWS 10 PRO üöÄ                ‚ïë
    ‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
    ‚ïë                                                              ‚ïë
    ‚ïë  ‚ú® Maximize o desempenho do seu Windows com seguran√ßa       ‚ïë
    ‚ïë  üßπ Limpeza completa de arquivos desnecess√°rios             ‚ïë
    ‚ïë  ‚ö° Otimiza√ß√£o de sistema e rede                             ‚ïë
    ‚ïë  üîß Configura√ß√µes avan√ßadas de registro                     ‚ïë
    ‚ïë  üîÑ Backup e restaura√ß√£o de configura√ß√µes                   ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïë  ‚ö†Ô∏è  IMPORTANTE: Execute como Administrador                  ‚ïë
    ‚ïë                                                              ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(welcome_text)

def check_admin_privileges():
    """Verifica e solicita privil√©gios de administrador"""
    if not Utils.is_admin():
        print("\n‚ö†Ô∏è  AVISO: Privil√©gios de administrador necess√°rios!")
        print("Algumas otimiza√ß√µes requerem execu√ß√£o como administrador.")
        
        response = input("\nDeseja tentar executar como administrador? (s/n): ").lower()
        
        if response in ['s', 'sim', 'y', 'yes']:
            print("üîÑ Tentando executar como administrador...")
            if Utils.run_as_admin():
                print("‚úÖ Programa ser√° reiniciado como administrador")
                sys.exit(0)
            else:
                print("‚ùå N√£o foi poss√≠vel obter privil√©gios de administrador")
                print("‚ö†Ô∏è  Continuando com privil√©gios limitados...")
        else:
            print("‚ö†Ô∏è  Continuando com privil√©gios limitados...")
    else:
        print("‚úÖ Executando com privil√©gios de administrador")

def handle_exception(exc_type, exc_value, exc_traceback):
    """Manipulador global de exce√ß√µes"""
    if issubclass(exc_type, KeyboardInterrupt):
        print("\n\n‚èπÔ∏è  Programa interrompido pelo usu√°rio")
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    # Log do erro
    logger = logging.getLogger(__name__)
    logger.error("Exce√ß√£o n√£o capturada", exc_info=(exc_type, exc_value, exc_traceback))
    
    # Mostra erro para o usu√°rio
    error_msg = f"""
    ‚ùå ERRO CR√çTICO:
    {exc_type.__name__}: {exc_value}
    
    Verifique o arquivo de log para mais detalhes.
    """
    print(error_msg)
    
    # Salva traceback em arquivo
    with open('logs/crash_report.txt', 'w', encoding='utf-8') as f:
        f.write(f"Crash Report - {Utils.get_system_info()}\n")
        f.write("=" * 50 + "\n")
        traceback.print_exception(exc_type, exc_value, exc_traceback, file=f)
    
    input("\nPressione Enter para sair...")

def main():
    """Fun√ß√£o principal"""
    try:
        # Configura manipulador de exce√ß√µes
        sys.excepthook = handle_exception
        
        # Mostra mensagem de boas-vindas
        show_welcome_message()
        
        # Verifica requisitos
        print("üîç Verificando requisitos do sistema...")
        check_system_requirements()
        
        # Verifica privil√©gios de administrador
        print("üîê Verificando privil√©gios de administrador...")
        check_admin_privileges()
        
        # Configura aplica√ß√£o
        print("‚öôÔ∏è  Configurando aplica√ß√£o...")
        if not setup_application():
            print("‚ùå Falha na configura√ß√£o da aplica√ß√£o")
            input("Pressione Enter para sair...")
            return
        
        # Inicia interface gr√°fica
        print("üé® Iniciando interface gr√°fica...")
        print("‚úÖ Aplica√ß√£o carregada com sucesso!\n")
        
        # Cria e executa a aplica√ß√£o
        app = OptimizerUI()
        app.run()
        
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        print("Verifique o arquivo de log para mais detalhes.")
        traceback.print_exc()
        input("\nPressione Enter para sair...")
    
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Programa interrompido pelo usu√°rio")
    
    finally:
        print("\nüëã Obrigado por usar o Otimizador Windows 10 Pro!")

if __name__ == "__main__":
    main()