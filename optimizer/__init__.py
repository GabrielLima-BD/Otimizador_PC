"""
üöÄ Optimizer Package - Vers√£o Avan√ßada

Pacote completo de otimiza√ß√£o para Windows com recursos avan√ßados:

M√ìDULOS B√ÅSICOS:
- SystemCleaner: Limpeza b√°sica do sistema
- PerformanceOptimizer: Otimiza√ß√µes de performance
- NetworkOptimizer: Otimiza√ß√£o de rede
- RegistryOptimizer: Limpeza do registro
- Utils: Utilit√°rios gerais

M√ìDULOS AVAN√áADOS:
- HardwareDetector: Detec√ß√£o autom√°tica de hardware
- AdvancedCleaner: Limpeza profunda e duplicatas
- AdvancedOptimizer: Otimiza√ß√µes avan√ßadas do sistema
- SystemMonitor: Monitoramento em tempo real
- ScheduleManager: Agendamento inteligente de tarefas

Autor: Gabriel
Vers√£o: 2.0.0 (Avan√ßada)
"""

# M√≥dulos b√°sicos
from .cleaner import SystemCleaner
from .performance import PerformanceOptimizer
from .network import NetworkOptimizer
from .registry import RegistryOptimizer
from .utils import Utils

# M√≥dulos avan√ßados
try:
    from .hardware_detector import HardwareDetector
    HARDWARE_DETECTION_AVAILABLE = True
except ImportError:
    HARDWARE_DETECTION_AVAILABLE = False

try:
    from .advanced_cleaner import AdvancedCleaner
    ADVANCED_CLEANING_AVAILABLE = True
except ImportError:
    ADVANCED_CLEANING_AVAILABLE = False

try:
    from .advanced_optimizer import AdvancedOptimizer
    ADVANCED_OPTIMIZATION_AVAILABLE = True
except ImportError:
    ADVANCED_OPTIMIZATION_AVAILABLE = False

try:
    from .system_monitor import SystemMonitor
    MONITORING_AVAILABLE = True
except ImportError:
    MONITORING_AVAILABLE = False

try:
    from .schedule_manager import ScheduleManager, ScheduleType
    SCHEDULING_AVAILABLE = True
except ImportError:
    SCHEDULING_AVAILABLE = False

# Lista de todos os componentes dispon√≠veis
__all__ = [
    # B√°sicos
    'SystemCleaner',
    'PerformanceOptimizer', 
    'NetworkOptimizer',
    'RegistryOptimizer',
    'Utils',
    
    # Avan√ßados (condicionais)
]

# Adicionar m√≥dulos avan√ßados se dispon√≠veis
if HARDWARE_DETECTION_AVAILABLE:
    __all__.append('HardwareDetector')

if ADVANCED_CLEANING_AVAILABLE:
    __all__.append('AdvancedCleaner')

if ADVANCED_OPTIMIZATION_AVAILABLE:
    __all__.append('AdvancedOptimizer')

if MONITORING_AVAILABLE:
    __all__.append('SystemMonitor')

if SCHEDULING_AVAILABLE:
    __all__.extend(['ScheduleManager', 'ScheduleType'])

# Informa√ß√µes de vers√£o e funcionalidades
__version__ = "2.0.0"
__author__ = "Gabriel"

FEATURES = {
    'basic_cleaning': True,
    'basic_optimization': True,
    'network_optimization': True,
    'registry_optimization': True,
    'hardware_detection': HARDWARE_DETECTION_AVAILABLE,
    'advanced_cleaning': ADVANCED_CLEANING_AVAILABLE,
    'advanced_optimization': ADVANCED_OPTIMIZATION_AVAILABLE,
    'system_monitoring': MONITORING_AVAILABLE,
    'task_scheduling': SCHEDULING_AVAILABLE
}

def get_available_features():
    """Retorna dicion√°rio com funcionalidades dispon√≠veis"""
    return FEATURES.copy()

def get_feature_status():
    """Retorna status textual das funcionalidades"""
    status = []
    
    # B√°sicas (sempre dispon√≠veis)
    status.append("‚úÖ Limpeza B√°sica")
    status.append("‚úÖ Otimiza√ß√£o de Performance")
    status.append("‚úÖ Otimiza√ß√£o de Rede")
    status.append("‚úÖ Otimiza√ß√£o do Registro")
    
    # Avan√ßadas (condicionais)
    status.append("‚úÖ Detec√ß√£o de Hardware" if HARDWARE_DETECTION_AVAILABLE else "‚ùå Detec√ß√£o de Hardware")
    status.append("‚úÖ Limpeza Avan√ßada" if ADVANCED_CLEANING_AVAILABLE else "‚ùå Limpeza Avan√ßada")
    status.append("‚úÖ Otimiza√ß√£o Avan√ßada" if ADVANCED_OPTIMIZATION_AVAILABLE else "‚ùå Otimiza√ß√£o Avan√ßada")
    status.append("‚úÖ Monitoramento" if MONITORING_AVAILABLE else "‚ùå Monitoramento")
    status.append("‚úÖ Agendamento" if SCHEDULING_AVAILABLE else "‚ùå Agendamento")
    
    return status