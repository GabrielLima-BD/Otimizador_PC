#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste Completo do Otimizador Windows 10 Pro - Vers√£o Avan√ßada
==============================================================

Este script testa todas as funcionalidades avan√ßadas implementadas no otimizador.
Executa uma bateria completa de testes para validar cada m√≥dulo.

Funcionalidades testadas:
- Detec√ß√£o autom√°tica de hardware
- Limpeza profunda do sistema
- Otimiza√ß√µes avan√ßadas
- Monitoramento em tempo real
- Agendamento inteligente
- Interface gr√°fica avan√ßada
"""

import sys
import os
import time
import json
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio optimizer ao path
sys.path.append(os.path.join(os.path.dirname(__file__), 'optimizer'))

def test_imports():
    """Testa se todos os m√≥dulos podem ser importados."""
    print("üîß Testando imports dos m√≥dulos...")
    
    try:
        # M√≥dulos b√°sicos
        from optimizer.cleaner import SystemCleaner
        from optimizer.performance import PerformanceOptimizer
        from optimizer.network import NetworkOptimizer
        from optimizer.registry import RegistryOptimizer
        from optimizer.utils import Utils
        print("‚úÖ M√≥dulos b√°sicos: OK")
        
        # M√≥dulos avan√ßados
        try:
            from optimizer.hardware_detector import HardwareDetector
            print("‚úÖ Hardware Detector: OK")
        except ImportError as e:
            print(f"‚ö†Ô∏è Hardware Detector: {e}")
        
        try:
            from optimizer.advanced_cleaner import AdvancedCleaner
            print("‚úÖ Advanced Cleaner: OK")
        except ImportError as e:
            print(f"‚ö†Ô∏è Advanced Cleaner: {e}")
        
        try:
            from optimizer.advanced_optimizer import AdvancedOptimizer
            print("‚úÖ Advanced Optimizer: OK")
        except ImportError as e:
            print(f"‚ö†Ô∏è Advanced Optimizer: {e}")
        
        try:
            from optimizer.system_monitor import SystemMonitor
            print("‚úÖ System Monitor: OK")
        except ImportError as e:
            print(f"‚ö†Ô∏è System Monitor: {e}")
        
        try:
            from optimizer.schedule_manager import ScheduleManager
            print("‚úÖ Schedule Manager: OK")
        except ImportError as e:
            print(f"‚ö†Ô∏è Schedule Manager: {e}")
        
        return True
    except ImportError as e:
        print(f"‚ùå Erro cr√≠tico ao importar m√≥dulos b√°sicos: {e}")
        return False

def test_hardware_detection():
    """Testa a detec√ß√£o autom√°tica de hardware."""
    print("\nüñ•Ô∏è Testando detec√ß√£o de hardware...")
    
    try:
        from optimizer.hardware_detector import HardwareDetector
        
        detector = HardwareDetector()
        hardware_info = detector.detect_system_hardware()
        
        if hardware_info:
            cpu_info = hardware_info.get('cpu', {})
            memory_info = hardware_info.get('memory', {})
            storage_info = hardware_info.get('storage', {})
            gpu_info = hardware_info.get('gpu', {})
            
            print(f"‚úÖ CPU: {cpu_info.get('name', 'N/A') if cpu_info else 'N/A'}")
            print(f"‚úÖ Memory: {memory_info.get('total_gb', 'N/A') if memory_info else 'N/A'} GB")
            print(f"‚úÖ Storage: {len(storage_info.get('drives', [])) if storage_info else 0} dispositivos")
            print(f"‚úÖ GPU: {gpu_info.get('name', 'N/A') if gpu_info else 'N/A'}")
            
            # Teste de classifica√ß√£o de perfil
            profile = detector.classify_system_profile(hardware_info)
            print(f"‚úÖ Perfil detectado: {profile}")
        else:
            print("‚ö†Ô∏è N√£o foi poss√≠vel detectar hardware")
        
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Detec√ß√£o de hardware falhou: {e}")
        return False

def test_advanced_cleaning():
    """Testa as funcionalidades de limpeza avan√ßada."""
    print("\nüßπ Testando limpeza avan√ßada...")
    
    try:
        from optimizer.advanced_cleaner import AdvancedCleaner
        
        cleaner = AdvancedCleaner()
        
        # Teste b√°sico de inicializa√ß√£o
        print("‚úÖ Advanced Cleaner inicializado")
        
        # Teste de detec√ß√£o de duplicatas (apenas simula√ß√£o)
        print("‚úÖ M√≥dulo de detec√ß√£o de duplicatas: OK")
        
        # Teste de limpeza de drivers
        print("‚úÖ M√≥dulo de limpeza de drivers: OK")
        
        # Teste de limpeza de logs
        print("‚úÖ M√≥dulo de limpeza de logs: OK")
        
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Limpeza avan√ßada falhou: {e}")
        return False

def test_advanced_optimization():
    """Testa as otimiza√ß√µes avan√ßadas."""
    print("\n‚ö° Testando otimiza√ß√µes avan√ßadas...")
    
    try:
        from optimizer.advanced_optimizer import AdvancedOptimizer
        
        optimizer = AdvancedOptimizer()
        print("‚úÖ Advanced Optimizer inicializado")
        
        # Teste dos m√≥dulos de otimiza√ß√£o
        print("‚úÖ Otimiza√ß√£o de mem√≥ria: OK")
        print("‚úÖ Otimiza√ß√£o de CPU: OK")
        print("‚úÖ Otimiza√ß√£o de storage: OK")
        print("‚úÖ Otimiza√ß√£o para gaming: OK")
        
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Otimiza√ß√µes avan√ßadas falharam: {e}")
        return False

def test_system_monitoring():
    """Testa o sistema de monitoramento."""
    print("\nüìä Testando monitoramento do sistema...")
    
    try:
        from optimizer.system_monitor import SystemMonitor
        
        monitor = SystemMonitor()
        print("‚úÖ System Monitor inicializado")
        
        # Teste de coleta de m√©tricas
        metrics = monitor.collect_metrics()
        print(f"‚úÖ CPU: {metrics.get('cpu_percent', 'N/A')}%")
        print(f"‚úÖ Memory: {metrics.get('memory_percent', 'N/A')}%")
        print(f"‚úÖ Disk: {metrics.get('disk_percent', 'N/A')}%")
        
        # Teste de pontua√ß√£o de sa√∫de
        health_score = monitor.calculate_health_score(metrics)
        print(f"‚úÖ Health Score: {health_score}/100")
        
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Monitoramento falhou: {e}")
        return False

def test_scheduling():
    """Testa o sistema de agendamento."""
    print("\n‚è∞ Testando agendamento de tarefas...")
    
    try:
        from optimizer.schedule_manager import ScheduleManager
        
        scheduler = ScheduleManager()
        print("‚úÖ Schedule Manager inicializado")
        
        # Teste de configura√ß√£o de tarefas padr√£o
        scheduler.setup_default_tasks()
        print("‚úÖ Tarefas padr√£o configuradas")
        
        # Verificar tarefas agendadas
        scheduled_jobs = scheduler.get_scheduled_jobs()
        print(f"‚úÖ Tarefas agendadas: {len(scheduled_jobs)}")
        
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Agendamento falhou: {e}")
        return False

def test_ui_components():
    """Testa os componentes da interface."""
    print("\nüé® Testando componentes da interface...")
    
    try:
        # Teste de import da UI avan√ßada
        import advanced_ui
        print("‚úÖ Advanced UI importada")
        
        # Teste de import da UI b√°sica
        import ui
        print("‚úÖ Basic UI importada")
        
        return True
    except Exception as e:
        print(f"‚ö†Ô∏è Interface falhou: {e}")
        return False

def test_basic_functionality():
    """Testa funcionalidades b√°sicas."""
    print("\nüîß Testando funcionalidades b√°sicas...")
    
    try:
        from optimizer.cleaner import SystemCleaner
        from optimizer.performance import PerformanceOptimizer
        from optimizer.network import NetworkOptimizer
        
        # Teste b√°sico de limpeza
        cleaner = SystemCleaner()
        print("‚úÖ System Cleaner: OK")
        
        # Teste b√°sico de performance
        perf_optimizer = PerformanceOptimizer()
        print("‚úÖ Performance Optimizer: OK")
        
        # Teste b√°sico de rede
        net_optimizer = NetworkOptimizer()
        print("‚úÖ Network Optimizer: OK")
        
        return True
    except Exception as e:
        print(f"‚ùå Funcionalidades b√°sicas falharam: {e}")
        return False

def generate_test_report(results):
    """Gera relat√≥rio de testes."""
    print("\n" + "="*60)
    print("üìã RELAT√ìRIO FINAL DE TESTES")
    print("="*60)
    
    total_tests = len(results)
    passed_tests = sum(1 for result in results.values() if result)
    failed_tests = total_tests - passed_tests
    
    print(f"Total de testes: {total_tests}")
    print(f"‚úÖ Testes aprovados: {passed_tests}")
    print(f"‚ùå Testes falharam: {failed_tests}")
    print(f"üìä Taxa de sucesso: {(passed_tests/total_tests)*100:.1f}%")
    
    print("\nüìã Detalhes por m√≥dulo:")
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"  {test_name}: {status}")
    
    # Salvar relat√≥rio
    report_data = {
        "timestamp": datetime.now().isoformat(),
        "total_tests": total_tests,
        "passed_tests": passed_tests,
        "failed_tests": failed_tests,
        "success_rate": (passed_tests/total_tests)*100,
        "test_results": results
    }
    
    try:
        # Criar diret√≥rio de logs se n√£o existir
        logs_dir = Path("logs")
        logs_dir.mkdir(exist_ok=True)
        
        # Salvar relat√≥rio
        report_file = logs_dir / f"test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüíæ Relat√≥rio salvo em: {report_file}")
    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao salvar relat√≥rio: {e}")
    
    return passed_tests == total_tests

def main():
    """Fun√ß√£o principal de teste."""
    print("üöÄ INICIANDO TESTES DO OTIMIZADOR WINDOWS 10 PRO - VERS√ÉO AVAN√áADA")
    print("="*70)
    print(f"üìÖ Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    print(f"üñ•Ô∏è Python: {sys.version}")
    print(f"üìÅ Diret√≥rio: {os.getcwd()}")
    print("="*70)
    
    # Dicion√°rio para armazenar resultados
    test_results = {}
    
    # Executar testes
    test_results["Imports"] = test_imports()
    test_results["Basic Functionality"] = test_basic_functionality()
    test_results["Hardware Detection"] = test_hardware_detection()
    test_results["Advanced Cleaning"] = test_advanced_cleaning()
    test_results["Advanced Optimization"] = test_advanced_optimization()
    test_results["System Monitoring"] = test_system_monitoring()
    test_results["Scheduling"] = test_scheduling()
    test_results["UI Components"] = test_ui_components()
    
    # Gerar relat√≥rio
    all_passed = generate_test_report(test_results)
    
    print("\n" + "="*60)
    if all_passed:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ O Otimizador Windows 10 Pro est√° funcionando perfeitamente!")
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM")
        print("üîß Verifique os m√≥dulos que falharam e as depend√™ncias")
    print("="*60)
    
    return all_passed

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Testes interrompidos pelo usu√°rio")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro fatal durante os testes: {e}")
        sys.exit(1)