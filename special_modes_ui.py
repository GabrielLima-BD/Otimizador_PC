"""
Interface dos Modos Especiais ULTRA
Sistema completo de modos de performance avan√ßados
"""

import customtkinter as ctk
import tkinter as tk
from tkinter import messagebox, filedialog
import threading
import time
import psutil
from datetime import datetime
import json
from typing import Dict, List, Optional, Callable
import queue

class SpecialModesWindow(ctk.CTkToplevel):
    """Janela dos modos especiais de otimiza√ß√£o"""
    
    def __init__(self, parent, special_modes=None):
        super().__init__(parent)
        
        self.title("üöÄ Modos Especiais ULTRA - Performance Extrema")
        self.geometry("1000x800")
        
        # Configurar janela
        self.transient(parent)
        self.grab_set()
        
        self.special_modes = special_modes
        self.monitoring_active = False
        self.performance_data = {"cpu": [], "memory": [], "timestamps": []}
        self.progress_queue = queue.Queue()
        
        self.setup_ui()
        self.center_window()
        
        # Iniciar processamento da queue
        self.after(100, self._process_progress_queue)
        
    def setup_ui(self):
        """Configura a interface"""
        
        # Header
        header_frame = ctk.CTkFrame(self)
        header_frame.pack(fill="x", padx=20, pady=10)
        
        title_label = ctk.CTkLabel(
            header_frame,
            text="üöÄ MODOS ESPECIAIS ULTRA",
            font=ctk.CTkFont(size=24, weight="bold")
        )
        title_label.pack(pady=10)
        
        subtitle_label = ctk.CTkLabel(
            header_frame,
            text="Performance Extrema | Limpeza Profunda | Monitoramento Avan√ßado",
            font=ctk.CTkFont(size=14)
        )
        subtitle_label.pack(pady=(0, 5))
        
        # üé§ AVISO DE PROTE√á√ÉO DE √ÅUDIO
        audio_protection_label = ctk.CTkLabel(
            header_frame,
            text="üé§ PROTE√á√ÉO ATIVA: Servi√ßos de √°udio/microfone est√£o protegidos e nunca ser√£o desabilitados",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="#00ff00"
        )
        audio_protection_label.pack(pady=(0, 10))
        
        # Container principal com abas
        self.tabview = ctk.CTkTabview(self)
        self.tabview.pack(fill="both", expand=True, padx=20, pady=10)
        
        # Abas principais
        self.setup_modes_tab()
        self.setup_monitoring_tab()
        self.setup_reports_tab()
        self.setup_settings_tab()
    
    def setup_modes_tab(self):
        """Aba dos modos especiais"""
        modes_tab = self.tabview.add("üéÆ Modos Especiais")
        
        # Frame dos modos principais
        main_frame = ctk.CTkScrollableFrame(modes_tab)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # üöÄ MODO TURBO
        turbo_frame = ctk.CTkFrame(main_frame)
        turbo_frame.pack(fill="x", pady=5)
        
        turbo_header = ctk.CTkLabel(
            turbo_frame,
            text="üöÄ MODO TURBO - Gaming Extremo",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#ff6b35"
        )
        turbo_header.pack(pady=10)
        
        turbo_desc = ctk.CTkLabel(
            turbo_frame,
            text="‚Ä¢ Desativa servi√ßos desnecess√°rios\\n‚Ä¢ Finaliza processos que consomem recursos\\n‚Ä¢ Otimiza prioridades de CPU para jogos\\n‚Ä¢ Limpa RAM e cache do sistema",
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        turbo_desc.pack(pady=5)
        
        turbo_buttons = ctk.CTkFrame(turbo_frame)
        turbo_buttons.pack(fill="x", padx=10, pady=10)
        
        self.turbo_button = ctk.CTkButton(
            turbo_buttons,
            text="üöÄ ATIVAR MODO TURBO",
            command=self.activate_turbo_mode,
            height=50,
            width=200,
            fg_color="#ff6b35",
            hover_color="#e55a2b"
        )
        self.turbo_button.pack(side="left", padx=5)
        
        self.deactivate_turbo_button = ctk.CTkButton(
            turbo_buttons,
            text="üîÑ DESATIVAR TURBO",
            command=self.deactivate_turbo_mode,
            height=50,
            width=200,
            fg_color="#636e72",
            hover_color="#575d61"
        )
        self.deactivate_turbo_button.pack(side="right", padx=5)
        
        # ü§´ MODO SILENCIOSO
        silent_frame = ctk.CTkFrame(main_frame)
        silent_frame.pack(fill="x", pady=5)
        
        silent_header = ctk.CTkLabel(
            silent_frame,
            text="ü§´ MODO SILENCIOSO - Automa√ß√£o Completa",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#6c5ce7"
        )
        silent_header.pack(pady=10)
        
        silent_desc = ctk.CTkLabel(
            silent_frame,
            text="‚Ä¢ Execu√ß√£o autom√°tica no boot do sistema\\n‚Ä¢ Limpeza silenciosa de arquivos tempor√°rios\\n‚Ä¢ Otimiza√ß√£o de registro sem interrup√ß√µes\\n‚Ä¢ Prepara√ß√£o autom√°tica para jogos",
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        silent_desc.pack(pady=5)
        
        self.silent_button = ctk.CTkButton(
            silent_frame,
            text="ü§´ EXECUTAR MODO SILENCIOSO",
            command=self.activate_silent_mode,
            height=50,
            fg_color="#6c5ce7",
            hover_color="#5a4fcf"
        )
        self.silent_button.pack(pady=10)
        
        # üìä MODO BENCHMARK
        benchmark_frame = ctk.CTkFrame(main_frame)
        benchmark_frame.pack(fill="x", pady=5)
        
        benchmark_header = ctk.CTkLabel(
            benchmark_frame,
            text="üìä MODO BENCHMARK - Teste Completo",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#00b894"
        )
        benchmark_header.pack(pady=10)
        
        benchmark_desc = ctk.CTkLabel(
            benchmark_frame,
            text="‚Ä¢ Aplica TODAS as otimiza√ß√µes dispon√≠veis\\n‚Ä¢ Coleta m√©tricas antes e depois\\n‚Ä¢ Gera relat√≥rio detalhado de performance\\n‚Ä¢ Calcula score de melhoria do sistema",
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        benchmark_desc.pack(pady=5)
        
        self.benchmark_button = ctk.CTkButton(
            benchmark_frame,
            text="üìä INICIAR BENCHMARK COMPLETO",
            command=self.activate_benchmark_mode,
            height=50,
            fg_color="#00b894",
            hover_color="#00a085"
        )
        self.benchmark_button.pack(pady=10)
        
        # üßπ MODO LIMPEZA PROFUNDA
        clean_frame = ctk.CTkFrame(main_frame)
        clean_frame.pack(fill="x", pady=5)
        
        clean_header = ctk.CTkLabel(
            clean_frame,
            text="üßπ MODO LIMPEZA PROFUNDA - Remove Tudo In√∫til",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#fd79a8"
        )
        clean_header.pack(pady=10)
        
        clean_desc = ctk.CTkLabel(
            clean_frame,
            text="‚Ä¢ Remove arquivos tempor√°rios avan√ßados\\n‚Ä¢ Limpa logs e dumps do sistema\\n‚Ä¢ Remove cache de todos os aplicativos\\n‚Ä¢ Limpa entradas √≥rf√£s do registro",
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        clean_desc.pack(pady=5)
        
        self.clean_button = ctk.CTkButton(
            clean_frame,
            text="üßπ INICIAR LIMPEZA PROFUNDA",
            command=self.activate_deep_clean_mode,
            height=50,
            fg_color="#fd79a8",
            hover_color="#e66992"
        )
        self.clean_button.pack(pady=10)
        
        # ‚ö° MODO EXTREMO
        extreme_frame = ctk.CTkFrame(main_frame)
        extreme_frame.pack(fill="x", pady=5)
        
        extreme_header = ctk.CTkLabel(
            extreme_frame,
            text="‚ö° MODO EXTREMO - M√ÅXIMA PERFORMANCE",
            font=ctk.CTkFont(size=18, weight="bold"),
            text_color="#d63031"
        )
        extreme_header.pack(pady=10)
        
        extreme_warning = ctk.CTkLabel(
            extreme_frame,
            text="‚ö†Ô∏è ATEN√á√ÉO: Este modo aplica as otimiza√ß√µes mais agressivas!\\nPode causar instabilidade em sistemas n√£o preparados.\\nRecomendado apenas para PCs dedicados ao gaming.",
            font=ctk.CTkFont(size=12, weight="bold"),
            text_color="#d63031",
            justify="center"
        )
        extreme_warning.pack(pady=5)
        
        extreme_desc = ctk.CTkLabel(
            extreme_frame,
            text="‚Ä¢ TODAS as otimiza√ß√µes ULTRA aplicadas\\n‚Ä¢ Configura√ß√µes extremas de CPU/GPU/RAM\\n‚Ä¢ Desabilita√ß√£o de funcionalidades do Windows\\n‚Ä¢ Performance absoluta sacrificando compatibilidade",
            font=ctk.CTkFont(size=12),
            justify="left"
        )
        extreme_desc.pack(pady=5)
        
        self.extreme_button = ctk.CTkButton(
            extreme_frame,
            text="‚ö° ATIVAR MODO EXTREMO ‚ö°",
            command=self.activate_extreme_mode,
            height=60,
            fg_color="#d63031",
            hover_color="#b71c1c",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.extreme_button.pack(pady=15)
        
        # Status e progresso
        status_frame = ctk.CTkFrame(modes_tab)
        status_frame.pack(fill="x", padx=10, pady=5)
        
        self.current_mode_label = ctk.CTkLabel(
            status_frame,
            text="Status: Modo Normal Ativo",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        self.current_mode_label.pack(pady=10)
        
        self.progress_bar = ctk.CTkProgressBar(status_frame)
        self.progress_bar.pack(fill="x", padx=20, pady=5)
        self.progress_bar.set(0)
        
        self.progress_label = ctk.CTkLabel(
            status_frame,
            text="",
            font=ctk.CTkFont(size=12)
        )
        self.progress_label.pack(pady=5)
    
    def setup_monitoring_tab(self):
        """Aba de monitoramento"""
        monitoring_tab = self.tabview.add("üìä Monitoramento")
        
        # Controles
        controls_frame = ctk.CTkFrame(monitoring_tab)
        controls_frame.pack(fill="x", padx=10, pady=10)
        
        control_header = ctk.CTkLabel(
            controls_frame,
            text="üìà MONITORAMENTO EM TEMPO REAL",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        control_header.pack(pady=10)
        
        buttons_frame = ctk.CTkFrame(controls_frame)
        buttons_frame.pack(fill="x", padx=10, pady=10)
        
        self.start_monitor_button = ctk.CTkButton(
            buttons_frame,
            text="‚ñ∂Ô∏è INICIAR",
            command=self.start_monitoring,
            fg_color="#00b894",
            width=120
        )
        self.start_monitor_button.pack(side="left", padx=5)
        
        self.stop_monitor_button = ctk.CTkButton(
            buttons_frame,
            text="‚èπÔ∏è PARAR",
            command=self.stop_monitoring,
            fg_color="#d63031",
            width=120
        )
        self.stop_monitor_button.pack(side="left", padx=5)
        
        self.save_data_button = ctk.CTkButton(
            buttons_frame,
            text="üíæ SALVAR",
            command=self.save_monitoring_data,
            fg_color="#6c5ce7",
            width=120
        )
        self.save_data_button.pack(side="left", padx=5)
        
        # M√©tricas em tempo real
        metrics_frame = ctk.CTkFrame(monitoring_tab)
        metrics_frame.pack(fill="x", padx=10, pady=5)
        
        metrics_header = ctk.CTkLabel(
            metrics_frame,
            text="üìã M√âTRICAS ATUAIS DO SISTEMA",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        metrics_header.pack(pady=10)
        
        # Grid de m√©tricas 3x2
        metrics_grid = ctk.CTkFrame(metrics_frame)
        metrics_grid.pack(fill="x", padx=20, pady=10)
        
        self.cpu_label = ctk.CTkLabel(
            metrics_grid, 
            text="üñ•Ô∏è CPU: ---%",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.cpu_label.grid(row=0, column=0, padx=20, pady=10)
        
        self.memory_label = ctk.CTkLabel(
            metrics_grid, 
            text="üß† RAM: ---%",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.memory_label.grid(row=0, column=1, padx=20, pady=10)
        
        self.disk_label = ctk.CTkLabel(
            metrics_grid, 
            text="üíæ Disco: ---%",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.disk_label.grid(row=0, column=2, padx=20, pady=10)
        
        self.network_label = ctk.CTkLabel(
            metrics_grid, 
            text="üåê Rede: --- ms",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.network_label.grid(row=1, column=0, padx=20, pady=10)
        
        self.processes_label = ctk.CTkLabel(
            metrics_grid, 
            text="‚öôÔ∏è Processos: ---",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.processes_label.grid(row=1, column=1, padx=20, pady=10)
        
        self.temp_label = ctk.CTkLabel(
            metrics_grid, 
            text="üå°Ô∏è Temp: ---¬∞C",
            font=ctk.CTkFont(size=14, weight="bold")
        )
        self.temp_label.grid(row=1, column=2, padx=20, pady=10)
        
        # Gr√°fico placeholder
        graph_frame = ctk.CTkFrame(monitoring_tab)
        graph_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        graph_label = ctk.CTkLabel(
            graph_frame,
            text="üìà GR√ÅFICO DE PERFORMANCE EM TEMPO REAL\\n\\n(Os dados s√£o atualizados quando o monitoramento est√° ativo)\\n\\nCPU, RAM, Disco, Rede - Hist√≥rico dos √∫ltimos 60 segundos",
            font=ctk.CTkFont(size=14),
            height=200,
            justify="center"
        )
        graph_label.pack(fill="both", expand=True, pady=30)
    
    def setup_reports_tab(self):
        """Aba de relat√≥rios"""
        reports_tab = self.tabview.add("üìã Relat√≥rios")
        
        header = ctk.CTkLabel(
            reports_tab,
            text="üìä RELAT√ìRIOS E HIST√ìRICO DE OTIMIZA√á√ïES",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        header.pack(pady=15)
        
        # Bot√µes de relat√≥rio
        buttons_frame = ctk.CTkFrame(reports_tab)
        buttons_frame.pack(fill="x", padx=10, pady=10)
        
        self.generate_report_button = ctk.CTkButton(
            buttons_frame,
            text="üìÑ GERAR RELAT√ìRIO COMPLETO",
            command=self.generate_performance_report,
            height=50,
            fg_color="#00b894"
        )
        self.generate_report_button.pack(pady=5)
        
        self.export_pdf_button = ctk.CTkButton(
            buttons_frame,
            text="üìë EXPORTAR PARA PDF",
            command=self.export_report_pdf,
            height=50,
            fg_color="#6c5ce7"
        )
        self.export_pdf_button.pack(pady=5)
        
        self.view_history_button = ctk.CTkButton(
            buttons_frame,
            text="üïí ATUALIZAR HIST√ìRICO",
            command=self.load_optimization_history,
            height=50,
            fg_color="#fd79a8"
        )
        self.view_history_button.pack(pady=5)
        
        # √Årea do hist√≥rico
        history_frame = ctk.CTkFrame(reports_tab)
        history_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        history_header = ctk.CTkLabel(
            history_frame,
            text="üìö HIST√ìRICO DE EXECU√á√ïES",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        history_header.pack(pady=10)
        
        self.history_text = ctk.CTkTextbox(
            history_frame,
            height=400,
            font=ctk.CTkFont(size=12)
        )
        self.history_text.pack(fill="both", expand=True, padx=15, pady=10)
        
        # Carregar hist√≥rico inicial
        self.load_optimization_history()
    
    def setup_settings_tab(self):
        """Aba de configura√ß√µes"""
        settings_tab = self.tabview.add("‚öôÔ∏è Configura√ß√µes")
        
        header = ctk.CTkLabel(
            settings_tab,
            text="üîß CONFIGURA√á√ïES AVAN√áADAS DOS MODOS",
            font=ctk.CTkFont(size=18, weight="bold")
        )
        header.pack(pady=15)
        
        # Configura√ß√µes de monitoramento
        monitor_frame = ctk.CTkFrame(settings_tab)
        monitor_frame.pack(fill="x", padx=10, pady=10)
        
        monitor_header = ctk.CTkLabel(
            monitor_frame,
            text="üìä Configura√ß√µes de Monitoramento",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        monitor_header.pack(pady=10)
        
        interval_frame = ctk.CTkFrame(monitor_frame)
        interval_frame.pack(fill="x", padx=15, pady=5)
        
        ctk.CTkLabel(interval_frame, text="Intervalo de Atualiza√ß√£o (segundos):", font=ctk.CTkFont(size=12)).pack(side="left", padx=10)
        
        self.update_interval_var = tk.StringVar(value="2")
        interval_entry = ctk.CTkEntry(
            interval_frame,
            textvariable=self.update_interval_var,
            width=80,
            font=ctk.CTkFont(size=12)
        )
        interval_entry.pack(side="right", padx=10)
        
        self.auto_start_var = tk.BooleanVar(value=False)
        auto_start_check = ctk.CTkCheckBox(
            monitor_frame,
            text="Iniciar monitoramento automaticamente com a janela",
            variable=self.auto_start_var,
            font=ctk.CTkFont(size=12)
        )
        auto_start_check.pack(pady=10)
        
        # Configura√ß√µes de seguran√ßa
        security_frame = ctk.CTkFrame(settings_tab)
        security_frame.pack(fill="x", padx=10, pady=10)
        
        security_header = ctk.CTkLabel(
            security_frame,
            text="üõ°Ô∏è Configura√ß√µes de Seguran√ßa",
            font=ctk.CTkFont(size=16, weight="bold")
        )
        security_header.pack(pady=10)
        
        self.auto_backup_var = tk.BooleanVar(value=True)
        backup_check = ctk.CTkCheckBox(
            security_frame,
            text="Fazer backup autom√°tico antes do Modo Turbo",
            variable=self.auto_backup_var,
            font=ctk.CTkFont(size=12)
        )
        backup_check.pack(pady=5)
        
        self.double_confirm_var = tk.BooleanVar(value=True)
        confirm_check = ctk.CTkCheckBox(
            security_frame,
            text="Exigir confirma√ß√£o dupla para Modo Extremo",
            variable=self.double_confirm_var,
            font=ctk.CTkFont(size=12)
        )
        confirm_check.pack(pady=5)
        
        self.create_restore_var = tk.BooleanVar(value=True)
        restore_check = ctk.CTkCheckBox(
            security_frame,
            text="Criar ponto de restaura√ß√£o antes de altera√ß√µes cr√≠ticas",
            variable=self.create_restore_var,
            font=ctk.CTkFont(size=12)
        )
        restore_check.pack(pady=5)
        
        # Bot√£o salvar
        save_button = ctk.CTkButton(
            settings_tab,
            text="üíæ SALVAR TODAS AS CONFIGURA√á√ïES",
            command=self.save_settings,
            height=50,
            font=ctk.CTkFont(size=14, weight="bold"),
            fg_color="#00b894"
        )
        save_button.pack(pady=30)
    
    # M√âTODOS DOS MODOS ESPECIAIS
    
    def activate_turbo_mode(self):
        """Ativa o modo turbo"""
        if not self.special_modes:
            messagebox.showerror("Erro", "Sistema de modos especiais n√£o dispon√≠vel")
            return
        
        result = messagebox.askyesno(
            "üöÄ Confirmar Modo Turbo",
            "O MODO TURBO ir√° otimizar seu sistema para gaming:\\n\\n"
            "‚úÖ Desativar servi√ßos desnecess√°rios\\n"
            "‚úÖ Finalizar processos que consomem recursos\\n"
            "‚úÖ Otimizar prioridades de CPU\\n"
            "‚úÖ Limpar RAM e cache\\n\\n"
            "Seu sistema ficar√° otimizado para jogos.\\n\\n"
            "Deseja continuar?",
            icon="question"
        )
        
        if result:
            thread = threading.Thread(target=self._run_turbo_mode)
            thread.daemon = True
            thread.start()
    
    def _run_turbo_mode(self):
        """Executa o modo turbo em thread separada"""
        def progress_callback(message, current, total):
            progress = current / total if total > 0 else 0
            self.progress_queue.put(("progress", progress, message))
        
        try:
            if self.special_modes:
                result = self.special_modes.activate_turbo_mode(progress_callback)
                self.progress_queue.put(("complete", result))
            else:
                self.progress_queue.put(("error", "Sistema de modos especiais n√£o dispon√≠vel"))
        except Exception as e:
            self.progress_queue.put(("error", str(e)))
    
    def deactivate_turbo_mode(self):
        """Desativa o modo turbo"""
        if not self.special_modes:
            return
        
        result = messagebox.askyesno(
            "üîÑ Desativar Modo Turbo",
            "Deseja restaurar as configura√ß√µes normais do sistema?\\n\\n"
            "Isso ir√° reverter as otimiza√ß√µes do Modo Turbo.",
            icon="question"
        )
        
        if result:
            thread = threading.Thread(target=self._run_deactivate_turbo)
            thread.daemon = True
            thread.start()
    
    def _run_deactivate_turbo(self):
        """Desativa o modo turbo"""
        def progress_callback(message, current, total):
            progress = current / total if total > 0 else 0
            self.progress_queue.put(("progress", progress, message))
        
        try:
            if self.special_modes:
                result = self.special_modes.deactivate_turbo_mode(progress_callback)
                self.progress_queue.put(("complete", result))
            else:
                self.progress_queue.put(("error", "Sistema de modos especiais n√£o dispon√≠vel"))
        except Exception as e:
            self.progress_queue.put(("error", str(e)))
    
    def activate_silent_mode(self):
        """Ativa o modo silencioso"""
        if not self.special_modes:
            messagebox.showerror("Erro", "Sistema de modos especiais n√£o dispon√≠vel")
            return
        
        thread = threading.Thread(target=self._run_silent_mode)
        thread.daemon = True
        thread.start()
    
    def _run_silent_mode(self):
        """Executa o modo silencioso"""
        def progress_callback(message, current, total):
            progress = current / total if total > 0 else 0
            self.progress_queue.put(("progress", progress, message))
        
        try:
            if self.special_modes:
                result = self.special_modes.activate_silent_mode(progress_callback)
                self.progress_queue.put(("complete", result))
            else:
                self.progress_queue.put(("error", "Sistema de modos especiais n√£o dispon√≠vel"))
        except Exception as e:
            self.progress_queue.put(("error", str(e)))
    
    def activate_benchmark_mode(self):
        """Ativa o modo benchmark"""
        if not self.special_modes:
            messagebox.showerror("Erro", "Sistema de modos especiais n√£o dispon√≠vel")
            return
        
        result = messagebox.askyesno(
            "üìä Confirmar Benchmark",
            "O MODO BENCHMARK ir√°:\\n\\n"
            "üîÑ Aplicar TODAS as otimiza√ß√µes dispon√≠veis\\n"
            "üìä Coletar m√©tricas antes e depois\\n"
            "üìà Gerar relat√≥rio detalhado de performance\\n"
            "‚è±Ô∏è O processo pode demorar v√°rios minutos\\n\\n"
            "Continuar com o benchmark completo?",
            icon="question"
        )
        
        if result:
            thread = threading.Thread(target=self._run_benchmark_mode)
            thread.daemon = True
            thread.start()
    
    def _run_benchmark_mode(self):
        """Executa o modo benchmark"""
        def progress_callback(message, current, total):
            progress = current / total if total > 0 else 0
            self.progress_queue.put(("progress", progress, message))
        
        try:
            if self.special_modes:
                result = self.special_modes.activate_benchmark_mode(progress_callback)
                self.progress_queue.put(("complete", result))
            else:
                self.progress_queue.put(("error", "Sistema de modos especiais n√£o dispon√≠vel"))
        except Exception as e:
            self.progress_queue.put(("error", str(e)))
    
    def activate_deep_clean_mode(self):
        """Ativa o modo limpeza profunda"""
        if not self.special_modes:
            messagebox.showerror("Erro", "Sistema de modos especiais n√£o dispon√≠vel")
            return
        
        thread = threading.Thread(target=self._run_deep_clean_mode)
        thread.daemon = True
        thread.start()
    
    def _run_deep_clean_mode(self):
        """Executa a limpeza profunda"""
        def progress_callback(message, current, total):
            progress = current / total if total > 0 else 0
            self.progress_queue.put(("progress", progress, message))
        
        try:
            if self.special_modes:
                result = self.special_modes.activate_deep_clean_mode(progress_callback)
                self.progress_queue.put(("complete", result))
            else:
                self.progress_queue.put(("error", "Sistema de modos especiais n√£o dispon√≠vel"))
        except Exception as e:
            self.progress_queue.put(("error", str(e)))
    
    def activate_extreme_mode(self):
        """Ativa o modo extremo"""
        if not self.special_modes:
            messagebox.showerror("Erro", "Sistema de modos especiais n√£o dispon√≠vel")
            return
        
        # Confirma√ß√£o dupla se habilitada
        if self.double_confirm_var.get():
            result1 = messagebox.askyesno(
                "‚ö†Ô∏è ATEN√á√ÉO - MODO EXTREMO ‚ö†Ô∏è",
                "VOC√ä EST√Å PRESTES A ATIVAR O MODO MAIS AGRESSIVO!\\n\\n"
                "‚ùå RISCOS:\\n"
                "‚Ä¢ Pode causar instabilidade do sistema\\n"
                "‚Ä¢ Algumas funcionalidades podem parar de funcionar\\n"
                "‚Ä¢ Modifica√ß√µes profundas no Windows\\n"
                "‚Ä¢ Recomendado APENAS para PCs dedicados ao gaming\\n\\n"
                "üéØ BENEF√çCIOS:\\n"
                "‚Ä¢ M√°xima performance poss√≠vel\\n"
                "‚Ä¢ Lat√™ncia m√≠nima\\n"
                "‚Ä¢ FPS maximizado\\n\\n"
                "Voc√™ tem CERTEZA absoluta que deseja continuar?",
                icon="warning"
            )
            
            if not result1:
                return
            
            result2 = messagebox.askyesno(
                "‚ö†Ô∏è CONFIRMA√á√ÉO FINAL ‚ö†Ô∏è",
                "√öLTIMA CHANCE DE CANCELAR!\\n\\n"
                "Ao clicar SIM, o MODO EXTREMO ser√° ativado e far√°\\n"
                "modifica√ß√µes irrevers√≠veis em seu sistema.\\n\\n"
                "CONFIRMA A ATIVA√á√ÉO DO MODO EXTREMO?",
                icon="error"
            )
            
            if not result2:
                return
        
        thread = threading.Thread(target=self._run_extreme_mode)
        thread.daemon = True
        thread.start()
    
    def _run_extreme_mode(self):
        """Executa o modo extremo"""
        def progress_callback(message, current, total):
            progress = current / total if total > 0 else 0
            self.progress_queue.put(("progress", progress, message))
        
        try:
            if self.special_modes:
                result = self.special_modes.activate_extreme_performance_mode(progress_callback)
                self.progress_queue.put(("complete", result))
            else:
                self.progress_queue.put(("error", "Sistema de modos especiais n√£o dispon√≠vel"))
        except Exception as e:
            self.progress_queue.put(("error", str(e)))
    
    def _process_progress_queue(self):
        """Processa a queue de progresso"""
        try:
            while True:
                event_type, data, *args = self.progress_queue.get_nowait()
                
                if event_type == "progress":
                    progress_value, message = data, args[0] if args else ""
                    self.progress_bar.set(progress_value)
                    self.progress_label.configure(text=message)
                
                elif event_type == "complete":
                    result = data
                    self.progress_bar.set(1.0)
                    
                    if result.get("success", False):
                        success_msg = "‚úÖ " + result.get("message", "Opera√ß√£o conclu√≠da!")
                        self.progress_label.configure(text=success_msg)
                        
                        if "mode" in result:
                            mode_name = result["mode"].replace("_", " ").title()
                            self.current_mode_label.configure(text=f"Status: {mode_name} Ativo üöÄ")
                        
                        # Mostrar detalhes em popup
                        if "optimizations" in result:
                            opts = result["optimizations"]
                            details = f"‚úÖ Opera√ß√£o conclu√≠da com sucesso!\\n\\n"
                            details += f"üìä {len(opts)} otimiza√ß√µes aplicadas:\\n\\n"
                            
                            for i, opt in enumerate(opts[:8]):  # Mostrar at√© 8 itens
                                details += f"‚Ä¢ {opt}\\n"
                            
                            if len(opts) > 8:
                                details += f"\\n... e mais {len(opts)-8} otimiza√ß√µes"
                            
                            if "total_space_freed" in result:
                                details += f"\\n\\nüíæ Espa√ßo liberado: {result['total_space_freed']} MB"
                            
                            messagebox.showinfo("üéâ Sucesso!", details)
                    
                    else:
                        error_msg = "‚ùå " + result.get("error", "Erro desconhecido")
                        self.progress_label.configure(text=error_msg)
                        messagebox.showerror("‚ùå Erro", result.get("error", "Erro desconhecido"))
                    
                    # Reset progress ap√≥s 5 segundos
                    self.after(5000, lambda: self.progress_bar.set(0))
                    self.after(5000, lambda: self.progress_label.configure(text=""))
                
                elif event_type == "error":
                    error_msg = data
                    self.progress_bar.set(0)
                    self.progress_label.configure(text="‚ùå " + error_msg)
                    messagebox.showerror("‚ùå Erro", error_msg)
        
        except queue.Empty:
            pass
        
        # Continuar processando
        self.after(100, self._process_progress_queue)
    
    # M√âTODOS DE MONITORAMENTO
    
    def start_monitoring(self):
        """Inicia o monitoramento"""
        if self.monitoring_active:
            return
        
        self.monitoring_active = True
        self.start_monitor_button.configure(state="disabled", text="üü¢ ATIVO")
        self.stop_monitor_button.configure(state="normal")
        
        monitor_thread = threading.Thread(target=self._monitoring_loop)
        monitor_thread.daemon = True
        monitor_thread.start()
    
    def stop_monitoring(self):
        """Para o monitoramento"""
        self.monitoring_active = False
        self.start_monitor_button.configure(state="normal", text="‚ñ∂Ô∏è INICIAR")
        self.stop_monitor_button.configure(state="disabled", text="‚èπÔ∏è PARADO")
    
    def _monitoring_loop(self):
        """Loop de monitoramento"""
        while self.monitoring_active:
            try:
                # Coletar m√©tricas
                cpu_percent = psutil.cpu_percent(interval=1)
                memory = psutil.virtual_memory()
                disk = psutil.disk_usage('C:')
                processes_count = len(psutil.pids())
                
                # Atualizar interface
                self.after(0, lambda: self._update_metrics_display(
                    cpu_percent, memory.percent, disk.percent, 
                    processes_count, 15.0, 45.0  # network, temp placeholder
                ))
                
                # Armazenar dados
                self.performance_data["cpu"].append(cpu_percent)
                self.performance_data["memory"].append(memory.percent)
                self.performance_data["timestamps"].append(datetime.now())
                
                # Manter apenas 60 pontos
                if len(self.performance_data["cpu"]) > 60:
                    for key in self.performance_data:
                        self.performance_data[key] = self.performance_data[key][-60:]
                
                # Intervalo
                interval = float(self.update_interval_var.get() or 2)
                time.sleep(interval)
                
            except Exception as e:
                print(f"Erro no monitoramento: {e}")
                time.sleep(2)
    
    def _update_metrics_display(self, cpu, memory, disk, processes, network, temp):
        """Atualiza m√©tricas na interface"""
        self.cpu_label.configure(text=f"üñ•Ô∏è CPU: {cpu:.1f}%")
        self.memory_label.configure(text=f"üß† RAM: {memory:.1f}%")
        self.disk_label.configure(text=f"üíæ Disco: {disk:.1f}%")
        self.processes_label.configure(text=f"‚öôÔ∏è Processos: {processes}")
        self.network_label.configure(text=f"üåê Rede: {network:.1f} ms")
        self.temp_label.configure(text=f"üå°Ô∏è Temp: {temp:.1f}¬∞C")
    
    def save_monitoring_data(self):
        """Salva dados de monitoramento"""
        if not self.performance_data["cpu"]:
            messagebox.showwarning("‚ö†Ô∏è Aviso", "Nenhum dado de monitoramento dispon√≠vel.\\nInicie o monitoramento primeiro.")
            return
        
        filename = filedialog.asksaveasfilename(
            title="Salvar Dados de Monitoramento",
            defaultextension=".json",
            filetypes=[("JSON files", "*.json"), ("Todos os arquivos", "*.*")],
            initialfile=f"monitoring_data_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        )
        
        if filename:
            try:
                data_to_save = {
                    "cpu": self.performance_data["cpu"],
                    "memory": self.performance_data["memory"],
                    "timestamps": [ts.isoformat() for ts in self.performance_data["timestamps"]],
                    "exported_at": datetime.now().isoformat(),
                    "total_samples": len(self.performance_data["cpu"])
                }
                
                with open(filename, 'w', encoding='utf-8') as f:
                    json.dump(data_to_save, f, indent=2, ensure_ascii=False)
                
                messagebox.showinfo("üíæ Sucesso", f"Dados salvos com sucesso!\\n\\nArquivo: {filename}\\nAmostras: {len(self.performance_data['cpu'])}")
            except Exception as e:
                messagebox.showerror("‚ùå Erro", f"Erro ao salvar dados:\\n{e}")
    
    # M√âTODOS DE RELAT√ìRIOS
    
    def generate_performance_report(self):
        """Gera relat√≥rio de performance"""
        try:
            # Coletar m√©tricas atuais
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('C:')
            
            report = f"""
üìä RELAT√ìRIO DE PERFORMANCE DO SISTEMA
======================================

üïí Gerado em: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}

üìà M√âTRICAS ATUAIS:
‚Ä¢ CPU: {cpu_percent:.1f}%
‚Ä¢ RAM: {memory.percent:.1f}% ({memory.used / (1024**3):.1f}GB / {memory.total / (1024**3):.1f}GB)
‚Ä¢ Disco C: {disk.percent:.1f}% ({disk.used / (1024**3):.1f}GB / {disk.total / (1024**3):.1f}GB)
‚Ä¢ Processos ativos: {len(psutil.pids())}

üîß MODOS ESPECIAIS DISPON√çVEIS:
‚Ä¢ üöÄ Modo Turbo: Otimiza√ß√£o para gaming
‚Ä¢ ü§´ Modo Silencioso: Automa√ß√£o completa
‚Ä¢ üìä Modo Benchmark: Teste e relat√≥rio
‚Ä¢ üßπ Limpeza Profunda: Remove arquivos in√∫teis
‚Ä¢ ‚ö° Modo Extremo: Performance m√°xima

üìä DADOS DE MONITORAMENTO:
‚Ä¢ Amostras coletadas: {len(self.performance_data.get('cpu', []))}
‚Ä¢ Monitoramento ativo: {'Sim' if self.monitoring_active else 'N√£o'}

üí° RECOMENDA√á√ïES:
‚Ä¢ Execute o Modo Turbo para otimizar jogos
‚Ä¢ Use a Limpeza Profunda para liberar espa√ßo
‚Ä¢ Monitore o sistema em tempo real
‚Ä¢ Fa√ßa backup antes do Modo Extremo
"""
            
            # Salvar relat√≥rio
            filename = filedialog.asksaveasfilename(
                title="Salvar Relat√≥rio de Performance",
                defaultextension=".txt",
                filetypes=[("Arquivos de texto", "*.txt"), ("Todos os arquivos", "*.*")],
                initialfile=f"relatorio_performance_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            )
            
            if filename:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(report)
                
                messagebox.showinfo("üìÑ Relat√≥rio Gerado", f"Relat√≥rio salvo com sucesso!\\n\\nArquivo: {filename}")
        
        except Exception as e:
            messagebox.showerror("‚ùå Erro", f"Erro ao gerar relat√≥rio:\\n{e}")
    
    def export_report_pdf(self):
        """Exporta relat√≥rio para PDF"""
        messagebox.showinfo(
            "üìë Exportar PDF", 
            "Funcionalidade de exporta√ß√£o PDF ser√° implementada em vers√£o futura.\\n\\n"
            "Por enquanto, use 'Gerar Relat√≥rio Completo' para salvar em TXT."
        )
    
    def load_optimization_history(self):
        """Carrega hist√≥rico de otimiza√ß√µes"""
        try:
            history = f"""
üìö HIST√ìRICO DE OTIMIZA√á√ïES E EXECU√á√ïES
=====================================

üïí √öltima atualiza√ß√£o: {datetime.now().strftime('%d/%m/%Y √†s %H:%M:%S')}

üìä ESTAT√çSTICAS GERAIS:
‚Ä¢ Sistema: Windows 10/11
‚Ä¢ Otimizador: Vers√£o ULTRA
‚Ä¢ Modos dispon√≠veis: 5 modos especiais
‚Ä¢ Status atual: {self.current_mode_label.cget('text')}

üöÄ MODOS EXECUTADOS RECENTEMENTE:
‚Ä¢ Nenhum modo especial executado ainda
‚Ä¢ Execute algum modo para ver o hist√≥rico aqui

üìà √öLTIMAS M√âTRICAS:
‚Ä¢ Monitoramento ativo: {'Sim' if self.monitoring_active else 'N√£o'}
‚Ä¢ Dados coletados: {len(self.performance_data.get('cpu', []))} amostras
‚Ä¢ Intervalo de coleta: {self.update_interval_var.get()}s

üîß CONFIGURA√á√ïES ATUAIS:
‚Ä¢ Auto-start monitoramento: {'Sim' if self.auto_start_var.get() else 'N√£o'}
‚Ä¢ Backup autom√°tico: {'Sim' if self.auto_backup_var.get() else 'N√£o'}
‚Ä¢ Confirma√ß√£o dupla extremo: {'Sim' if self.double_confirm_var.get() else 'N√£o'}

üí° PR√ìXIMOS PASSOS:
1. Execute o Modo Turbo para otimizar o sistema
2. Ative o monitoramento em tempo real
3. Use a Limpeza Profunda para liberar espa√ßo
4. Teste o Modo Benchmark para relat√≥rio completo

‚ö†Ô∏è IMPORTANTE:
‚Ä¢ Fa√ßa backup antes de usar o Modo Extremo
‚Ä¢ O Modo Silencioso √© ideal para automa√ß√£o
‚Ä¢ Monitore o sistema ap√≥s otimiza√ß√µes
"""
            
            self.history_text.delete("0.0", "end")
            self.history_text.insert("0.0", history)
            
        except Exception as e:
            print(f"Erro ao carregar hist√≥rico: {e}")
            self.history_text.delete("0.0", "end")
            self.history_text.insert("0.0", f"Erro ao carregar hist√≥rico: {e}")
    
    def save_settings(self):
        """Salva configura√ß√µes"""
        try:
            settings = {
                "update_interval": self.update_interval_var.get(),
                "auto_start_monitoring": self.auto_start_var.get(),
                "auto_backup": self.auto_backup_var.get(),
                "double_confirm_extreme": self.double_confirm_var.get(),
                "create_restore_point": self.create_restore_var.get(),
                "saved_at": datetime.now().isoformat()
            }
            
            with open("special_modes_settings.json", 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=2, ensure_ascii=False)
            
            messagebox.showinfo("üíæ Configura√ß√µes Salvas", "Todas as configura√ß√µes foram salvas com sucesso!")
            
        except Exception as e:
            messagebox.showerror("‚ùå Erro", f"Erro ao salvar configura√ß√µes:\\n{e}")
    
    def center_window(self):
        """Centraliza a janela na tela"""
        self.update_idletasks()
        x = (self.winfo_screenwidth() // 2) - (1000 // 2)
        y = (self.winfo_screenheight() // 2) - (800 // 2)
        self.geometry(f"1000x800+{x}+{y}")